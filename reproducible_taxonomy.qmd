---
title: <center><font size="6"><b>Reproducibility in the use of taxonomic information</b></font></center>
toc: true
toc-depth: 2
toc-location: left
number-sections: true
highlight-style: pygments
format:
  html:
    df-print: kable
    code-fold: show
    code-tools: true
    css: styles.css
    link-external-icon: true
    link-external-newwindow: true  
editor_options: 
  chunk_output_type: console
---

```{r, echo = FALSE}

# devtools::install_github("hadley/emo")
library("emo")
library("knitr")

# options to customize chunk outputs
knitr::opts_chunk$set(
  tidy.opts = list(width.cutoff = 65), 
  tidy = TRUE,
  message = FALSE
 )

# this is a customized printing style data frames 
# screws up tibble function
tibble <- function(x, ...) { 
  x <- kbl(x, digits=4, align= 'c', row.names = FALSE) 
   x <- kable_styling(x, position ="center", full_width = FALSE,  bootstrap_options = c("striped", "hover", "condensed", "responsive")) 
   asis_output(x)
}

registerS3method("knit_print", "data.frame", tibble)
```


# Introduction
One aspect of scientific reproducibility that is specific to the biological sciences is how taxonomic information is obtained, used, and reported. In the discussion, we address the topics of using vouchers and the importance of adequately documenting the justification of taxonomic identifications. Here we will see a tool for obtaining and curating taxonomic information in a reproducible manner.

We will use the R package ['taxize'](https://github.com/ropensci/taxize). By the way, the article describing the package was published in the journal [F1000Research](https://f1000research.com/articles/2-191/v2), one of the journals we saw at the beginning of the semester is completely open.

<p align="center">
![](./images/Screenshot_taxize.png)
<p align="center">
<font size="2">[Chamberlain and Szöcs (2013)](https://f1000research.com/articles/2-191/v2). 
</p>

# Why 'taxize'?

There are online databases from which taxonomic information for various biological organisms can be obtained. However, there are advantages to performing these searches programmatically:
 
 1. it is more efficient if you have to search for many taxa
 2. the search becomes a reproducible part of the workflow
 
 The idea of taxize is to make the extraction and use of taxonomic information easy and reproducible.
 
 <p align="center">
![](./images/frogtoon.JPG)
<p align="center">
<font size="2"> Image: Rohan Chakravarty/[CC BY-NC-ND 3.0](https://creativecommons.org/licenses/by-nc-nd/3.0/).
</p>

# What does 'taxize' do?
 'taxize' connects with several [taxonomic databases](https://f1000research.com/articles/2-191/v2#T1) and more can be gradually added. This information can be used to carry out common tasks in the research process. For example:
 
## Resolves Taxonomic Names
If we have a list of specimens, we may want to know if we are using updated names and if the names we have are spelled correctly. We can do this using the Global Names Resolver [(GNR)](http://resolver.globalnames.org/) application from the [Encyclopedia of Life](https://eol.org/), through taxize.

As an example, let's look at occurrence data that I downloaded from [GBIF](https://www.gbif.org/). I downloaded records of birds from the genus *Ramphocelus* in Costa Rica, from the National Zoological Collection. Perhaps, I am working with or planning to work with these specimens. 

The data is here (https://doi.org/10.15468/dl.d8frtc)

and this is an example of the bird:
  
<p align="center">
![](./images/Ramphocelus.jpeg)
<p align="center">
<

font size="2"> *Ramphocelus sanguinolentus*, La Fortuna, Costa Rica
</p>

```{r}
# read the data
dat <- read.csv(file = "./additional_files/0098054-200613084148143.csv", header = T, sep = "\t")

# what are the species in CR?
Ram.names <- levels(dat$species)
Ram.names
```

Let's see which databases I can use to search for the names of my species
```{r, message=FALSE}
library(taxize)
require(kableExtra)
data.sources <- gnr_datasources() 

data.sources[,c(1,5,8,9)]
```

Let's check if they are spelled correctly
```{r, eval = FALSE}
name.res <- gnr_resolve(sci = Ram.names,data_source_ids = c(3:4))        
name.res[,-1]

```

And what if they weren't?
```{r}
Ram.names2 <- Ram.names
Ram.names2[2] <- "Ramphocelus passerini"
name.res2 <- gnr_resolve(sci = Ram.names2,data_source_ids = c(3:4))        
name.res2[,-1]

```

## Identifies Synonyms

Let's search for synonyms for these species
```{r, eval = FALSE}
synonyms(sci_id = Ram.names, db = "itis") 
```

To use some databases, it is necessary to obtain an 'API key'. This cannot be done automatically with 'taxize' but instructions on how to obtain and save the API key for use from R can be obtained.
Let's look at a couple of examples:
```{r, eval=FALSE}
use_tropicos()
use_iucn()
use_entrez()

# for more information
?key_helpers()
?`taxize-authentication`
```
 
<style>
div.ejercicios { background-color:#F5F5DC; border-radius: 5px; padding: 5px}
div.discu { background-color:#6699CC; border-radius: 5px; padding: 5px}
</style>
<div class = "ejercicios">

### Exercise 1

1. Install the 'usethis' package with the command `install.packages("usethis")`
2. Obtain the 'API key' for a database of your interest
3. Add this 'API key' to your environment in R with the command `usethis::edit_r_environ()`
4. Restart R and verify that you have the 'API key' using `getkey()`
5. If everything went well, you're ready to use it.
</div>
&nbsp; 

```{r, include=FALSE}
getkey(service = "entrez")
```
 
## Extracts Taxonomic Classification
We can obtain information about the higher taxonomic classification of our species. If your key is for 'tropicos' or 'entrez', you can use the respective databases (tropicos and ncbi). For example:
```{r, eval = FALSE}
Ram.class <- classification(Ram.names, db = "ncbi")

Ram.class[[1]]

```

and if we just want to know the family...
```{r}

Ram.fam <- tax_name(sci = Ram.names, get = "family", db = "ncbi")

Ram.fam

```

## Gets Downstream Names
Perhaps we want to know which or how many are the members of a certain taxonomic group. For example, how many species are in the genus *Ramphocelus*?
```{r, eval = FALSE}
# separate the genus
genus <- strsplit(Ram.names[1], " ")[[1]][1]

# get the species
Ram.down <- downstream(sci_id = genus, downto = "species", db = "ncbi")
Ram.down[[1]]

```

## Gets Conservation Status Information
If you have the 'API key' for IUCN, you can obtain information about conservation status. 

*NOTE: The authors of 'taxize' warn to use with caution as there may be errors*

```{r, eval=F}
Ram.sum <- iucn_summary(Ram.names)
iucn_status(Ram.sum)
get_iucn(Ram.names)
```

# Examples of Applications in Reproducible Science
Let's see some examples of how using tools like 'taxize' contributes to more reproducible research.

## Lists of Hosts in Thousands of Communities
<p align="center">
![](./images/Zoonotic1.png)
<p align="center">
<font size="2"> Article by [Gibb et al. 2020, Nature](https://www.nature.com/articles/s41586-020-2562-8)
</p>

**From the methods section:**
  
"*We compiled animal host–pathogen associations from several source databases, to provide as comprehensive a dataset as possible of zoonotic host species and their pathogens: the Enhanced Infectious Diseases (EID2) database; the Global Mammal Parasite Database v.2.0 (GMPD2) which collates records of parasites of cetartiodactyls, carnivores and primates; a reservoir hosts database; a mammal–virus associations database; and a rodent zoonotic reservoirs database augmented with pathogen data from the Global Infectious Disease and Epidemiology Network (GIDEON) (Supplementary Table 8). <span style="color: #32CD32;">We harmonized species names across all databases, excluding instances in which either hosts or pathogens could not be classified to species level. To prevent erroneous matches due to misspelling or taxonomic revision, all host species synonyms were accessed from Catalogue Of Life using ‘taxize’ v.0.8.939</span>. Combined, the dataset contained 20,382 associations between 3,883 animal host species and 5,694 pathogen species.*"

Let's see the code from the article and make a small modification to apply the function to our data.

```{r, message=FALSE}
# taxize/GBIFr
require(taxize)
require(rgbif)

# function to find and resolve taxonomic synonyms based on Encyclopedia of Life
findSyns2 <- function(x){
  
  # get specific species name
  #taxname = hosts_vec[x]
  # a small change to use the function with our data
  taxname = x
  # print progress
  print(paste("Processing:", taxname, sep=" "))
  
  # phyla
  phyla = c("Chordata","Arthropoda","Gastropoda", "Mollusca")
  
  # (1) resolve misspellings
  taxname_resolved = gnr_resolve(taxname, with_canonical_ranks = TRUE)$matched_name2[1]
  if(!is.null(taxname_resolved)){ if(length(strsplit(taxname_resolved, " ", fixed=TRUE)[[1]]) == 2 ){ taxa = taxname_resolved }}
  if(!is.null(taxname_resolved)){ if(length(strsplit(taxname_resolved, " ", fixed=TRUE)[[1]]) > 2 ){ taxa = paste(strsplit(taxname_resolved, " ", fixed=TRUE)[[1]][1:2], collapse=" ")} }
  
  # if taxa == NA, return list with nothing defined 
  if(is.na(taxa)){   if(class(syns)[1] == 'simpleError'){ return(data.frame(Original=taxname, Submitted=taxname_resolved, Accepted_name=NA, Selected_family=NA, Selected_order=NA, Selected_class=NA, Synonyms=NA))} }
  
  # (2) remove sub-species categorizations and set 'genus' and 'species' variables
  genus = NULL
  if(length(strsplit(taxa, " ", fixed=TRUE)[[1]]) %in% c(2,3)){ genus = strsplit(taxa," ",fixed=TRUE)[[1]][1]; species = strsplit(taxa," ",fixed=TRUE)[[1]][2] }
  if(length(strsplit(taxa, "_", fixed=TRUE)[[1]]) %in% c(2,3)){ genus = strsplit(taxa,"_",fixed=TRUE)[[1]][1]; species = strsplit(taxa,"_",fixed=TRUE)[[1]][2] }
  if(length(strsplit(taxa, " ", fixed=TRUE)[[1]]) >3 | length(strsplit(taxa, "_" , fixed=TRUE)[[1]][1]) > 3){ return("name error") }
  if(is.null(genus)){ genus = taxa; species = NA }
  
  # (3) use genus to lookup family, order, class
  syns = tryCatch( name_lookup(genus)$data, error = function(e) e)
  if(class(syns)[1] == 'simpleError'){ return(data.frame(Original=taxname, Submitted=taxa, Accepted_name=NA, Selected_family=NA, Selected_order=NA, Selected_class=NA, Synonyms=NA))}
  
  # for cases where the lookup does not find a phylum within the specified range
  if(all(! syns$phylum %in% phyla)){
    fam1 = syns$family[ !is.na(syns$family) & !is.na(syns$phylum) ]
    order1 = syns$order[ !is.na(syns$family) & !is.na(syns$phylum) ]
    class1 = syns$class[ !is.na(syns$family) & !is.na(syns$phylum) ]
    datfam = data.frame(fam1=fam1, order=1:length(fam1), order1=order1, class1=class1)
    # select highest frequency fam/class/order combo
    fam2 = as.data.frame( table(datfam[ , c(1,3,4)]) )
    family2 = as.vector(fam2[ fam2$Freq==max(fam2$Freq, na.rm=TRUE), "fam1"] ) 
    order2 = as.vector(fam2[ fam2$Freq==max(fam2$Freq, na.rm=TRUE), "order1"] )
    class2 = as.vector(fam2[ fam2$Freq==max(fam2$Freq, na.rm=TRUE), "class1"] )
    if(length(fam2) > 1){
      datfam2 = datfam[datfam$fam1 %in% family2, ]
      family2 = as.vector(datfam2[datfam2$order == min(datfam2$order, na.rm=TRUE), "fam1"])
      order2 = as.vector(datfam2[datfam2$order == min(datfam2$order, na.rm=TRUE), "order1"])
      class2 = as.vector(datfam2[datfam2$order == min(datfam2$order, na.rm=TRUE), "class1"])
    }
  } else {	# for everything else
    fam1 = syns$family[ !is.na(syns$family) & !is.na(syns$phylum) & (syns$phylum %in% phyla) ]
    order1 = syns$order[ !is.na(syns$family) & !is.na(syns$phylum) & (syns$phylum %in% phyla) ]
    class1 = syns$class[ !is.na(syns$family) & !is.na(syns$phylum) & (syns$phylum %in% phyla) ]
    datfam = data.frame(fam1=fam1, order=1:length(fam1), order1 = order1, class1=class1)
    # select highest frequency fam/class/order combo
    fam2 = as.data.frame( table(datfam[ , c(1,3,4)]) )
    family2 = as.vector(fam2[ fam2$Freq==max(fam2$Freq, na.rm=TRUE), "fam1"] ) 
    order2 = as.vector(fam2[ fam2$Freq==max(fam2$Freq, na.rm=TRUE), "order1"] )
    class2 = as.vector(fam2[ fam2$Freq==max(fam2$Freq, na.rm=TRUE), "class1"] )
    # select highest in list if more than one max
    if(length(family2) > 1){
      datfam2 = datfam[datfam$fam1 %in% family2, ]
      family2 = as.vector(datfam2[datfam2$order == min(datfam2$order, na.rm=TRUE), "fam1"])
      order2 = as.vector(datfam2[datfam2$order == min(datfam2$order, na.rm

=TRUE), "order1"])
      class2 = as.vector(datfam2[datfam2$order == min(datfam2$order, na.rm=TRUE), "class1"])
    } 
  }

  # (4) search for species synonyms in ITIS
  syns = tryCatch(suppressMessages(synonyms(taxa, db='itis')), error=function(e) e)
  if(class(syns)[1] == 'simpleError'){ return(data.frame(Original=taxname, Submitted=taxa, Accepted_name="failed", Selected_family=family2, Selected_order=order2, Selected_class=class2, Synonyms="failed"))}
  syns = as.data.frame(syns[[1]])
  
  # get info
  original = taxa
  accepted_name = taxa # save accepted name as original searched name
  if("acc_name" %in% names(syns)){ accepted_name = syns$acc_name } # unless search shows that this is not the accepted name
   if("syn_name" %in% names(syns)){ synonyms = unique(syns$syn_name) 
  } else{ synonyms = NA }
  
  # combine into list and add synonyms 
  result = data.frame(Original=taxname, 
                      Submitted=taxa,
                      Accepted_name=accepted_name,
                      Selected_family=family2,
                      Selected_order=order2,
                      Selected_class=class2)
  result = do.call("rbind", replicate(length(synonyms), result[1, ], simplify = FALSE))
  result$Synonyms = synonyms
  return(result)
}

# nest function within a tryCatch call in case of any errors
findSyns3 = function(x){
  result = tryCatch(findSyns2(x), error=function(e) NULL)
  return(result)
}
```

Earlier, we saw that there's a name synonymous with *Ramphocelus sanguinolentus*. What would the function by Gibb et al. do with that?
```{r}
Ram.syn1 <- findSyns3("Phlogothraupis sanguinolenta")

Ram.syn1

```

And with one that's misspelled?
```{r}
Ram.syn2 <- findSyns3(Ram.names2[2])

Ram.syn2

```

## Camera trap data management

<p align="center">
![](./images/camtrapR.png)
<p align="center">
<font size="2"> Article by [Niedballa et al. 2016,Methods Ecol. Evol.](https://besjournals.onlinelibrary.wiley.com/doi/pdf/10.1111/2041-210X.12600)
</p>

**From the methods section:**

*"Users are free to use any species names (or abbreviations or codes) they wish. If scientific or common species names are used, <span style="color: #32CD32;">the function checkSpeciesNames can check them against the ITIS taxonomic database (www.itis.gov) and returns their matching counterparts (utilizing the R package taxize (Chamberlain & Szöcs 2013) internally)</span>, making sure species names and spelling are standardized and taxonomically sound, and thus making it easier to combine data sets from different studies. "*

Let's see some examples from the camtrapR vignettes. We're not going to download the package because the CRAN version of 'camtrapR' is not compatible with the CRAN version of 'taxize'.

<p align="center">
![](./images/facepalm.jpg){width=50%}
</p>

Let's rewrite the current function updating the arguments of 'taxize'.
```{r}
checkSpeciesNames <- function (speciesNames, searchtype, accepted = TRUE, ask = TRUE) 
{
  if (!requireNamespace("taxize", quietly = TRUE)) {
    stop("Please install the package taxize to run this function")
  }
  if (!requireNamespace("ritis", quietly = TRUE)) {
    stop("Please install the package ritis to run this function")
  }
  searchtype <- match.arg(searchtype, choices = c("scientific", 
    "common"))
  stopifnot(is.logical(accepted))
  stopifnot(is.character(speciesNames) | is.factor(speciesNames))
  speciesNames <- unique(as.character(speciesNames))
  file.sep <- .Platform$file.sep
  tsns <- try(taxize::get_tsn(sci_com = speciesNames, searchtype = searchtype, 
    accepted = accepted, ask = ask, messages = FALSE))
  if (inherits(tsns, "try-error")) {
    message(paste("error in get_tsn. Exiting without results:\n", 
      tsns, sep = ""))
    return(invisible(NULL))
  }
  tsns <- taxize::as.tsn(unique(tsns), check = FALSE)
  if (any(is.na(tsns))) {
    not.matched <- which(is.na(tsns))
    warning(paste("found no matches for", length(not.matched), 
      "name(s):\n", paste(speciesNames[not.matched], collapse = ", ")), 
      immediate. = TRUE, call. = FALSE)
    tsns_worked <- taxize::as.tsn(tsns[-not.matched], check = FALSE)
  } else {
    tsns_worked <- tsns
  }
  
  if (length(tsns_worked) >= 1) {
    scientific <- common <- author <- rankname <- taxon_status <- data.frame(matrix(NA, 
      nrow = length(tsns_worked), ncol = 2), stringsAsFactors = FALSE)
    colnames(scientific) <- c("tsn", "combinedname")
    colnames(common) <- c("tsn", "commonName")
    colnames(author) <- c("tsn", "authorship")
    colnames(rankname) <- c("tsn", "rankname")
    colnames(taxon_status) <- c("tsn", "taxonUsageRating")
    
    for (i in 1:length(tsns_worked)) {
      
      scientific_tmp <- ritis::scientific_name(tsns_worked[i])
      common_tmp <- ritis::common_names(tsns_worked[i])
      author_tmp <- ritis::taxon_authorship(tsns_worked[i])
      rankname_tmp <- ritis::rank_name(tsns_worked[i])
      if ("tsn" %in% colnames(scientific_tmp)) {
        scientific[i, ] <- scientific_tmp[c("tsn", "combinedname")]
      }
      if ("tsn" %in% colnames(common_tmp)) {
        if (length(unique(common_tmp$tsn)) > 1) {
          common2 <- tapply(common_tmp$commonName, INDEX = common_tmp$tsn, 
            FUN = paste, collapse = file.sep)
          common_tmp <- data.frame(commonName = common2, 
            tsn = rownames(common2), stringsAsFactors = FALSE)
        }
        common[i, ] <- common_tmp[, c("tsn", "commonName")]
      }
      if ("tsn" %in% colnames(author_tmp)) {
        author[i, ] <- author_tmp[c("tsn", "authorship")]
      }
      if ("tsn" %in% colnames(rankname_tmp)) {
        rankname[i, ] <- rankname_tmp[c("tsn", "rankname")]
      }
      if (accepted == FALSE) {
        taxon_status_tmp <- ritis::core_metadata(tsns_worked[i])
        if ("tsn" %in% colnames(taxon_status_tmp)) {
          taxon_status[i, ] <- taxon_status_tmp[c("tsn", 
            "taxonUsageRating")]
        }
      }
    }
    dat.out <- data.frame(user_name = speciesNames, tsn = as.numeric(tsns))
    dat.out <- merge(x = dat.out, y = scientific, by = "tsn", 
      all.x = TRUE, sort = FALSE)
    dat.out <- merge(x = dat.out, y = common, by = "tsn", 
      all.x = TRUE, sort = FALSE)
    dat.out <- merge(x = dat.out, y = author, by = "tsn", 
      all.x = TRUE, sort = FALSE)
    dat.out <- merge(x = dat.out, y = rankname, by = "tsn", 
      all.x = TRUE, sort = FALSE)
    dat.out$itis_url <- NA
    dat.out$itis_url[match(tsns_worked, dat.out$tsn)] <- attributes(tsns_worked)$uri
    colnames(dat.out)[colnames(dat.out) == "combinedname"] <- "scientificName"
    if (accepted == FALSE) {
      dat.out <- merge(x = dat.out, y = taxon_status, 
        by = "tsn", all.x = TRUE, sort = FALSE)
    }
    else {
      dat.out$taxon_status[!is.na(dat.out$tsn)] <- "valid"
    }
    return(dat.out)
  } else {
    stop("found no TSNs for speciesNames", call. = FALSE)
  }
}

```

Now, what can we do?

### Search information by common names
```{r}
checkNames1 <- checkSpeciesNames(speciesNames = c("Bearded Pig", "Malayan Civet"),
                                  searchtype   = "common")
checkNames1%>%
  kbl() %>%
  kable_minimal()
```

### Search information by scientific names (including subspecies)
```{r}
checkNames2 <- checkSpeciesNames (speciesNames = "Viverra tangalunga tangalunga",
                                  searchtype   = "scientific")
checkNames2%>%
  kbl() %>%
  kable_minimal()
```

### Search information with an incorrect name
```{r}
checkNames3 <- checkSpeciesNames (speciesNames = "Felis bengalensis",
                                  searchtype   = "scientific",
                                  accepted     = FALSE)

checkNames3
```

### Search information with an ambiguous name
```{r, eval = FALSE}

checkNames4 <- checkSpeciesNames (speciesNames = "Chevrotain",
                                  searchtype   = "common")
# choose from the menu
checkNames4 
  
```

---

# Session Information {.unnumbered .unlisted}

```{r session info, echo=F}

sessionInfo()

```
