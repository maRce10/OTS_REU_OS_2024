[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Reproducible Science Workshop, REU OTS 2024",
    "section": "",
    "text": "Reproducible Science Workshop\n\n\nOrganization For Tropical Studies\n\n\n\nMarcelo Araya-Salas, PhD\n\n\n\nApril, 2024\n\n\n\n\n \nScientific production currently suffers from a lack of reproducibility (the ability to recreate a study based on published information), due to the poor documentation of the methods and analyses used, as well as the lack of access to the data generated. Biology has not escaped this crisis of scientific reproducibility, which affects the credibility of our community. Fortunately, in response to this crisis, a multitude of tools have been developed, in most cases freely available, to increase the transparency and accessibility of data supporting the conclusions of scientific studies. Making these tools available to the scientific community and encouraging their use early in the training of researchers is critical to solving the reproducibility crisis. These tools revolve around three main axes: 1) online repositories for sharing data and research products, 2) open access digital tools, and 3) the implementation of good data management and analysis practices**. These three axes represent the modules in which the course is organized. This course aims to deepen the use of tools (mostly digital) as well as good practices along each of the common stages of the each of the stages common to the development of research projects in biology.\n\nObjetives\n\nTo raise awareness of the current problem of scientific reproducibility and its implications for the production of knowledge and its legitimacy in society. production of knowledge and its legitimacy in society.\nTo provide students with free software computational tools that facilitate the documentation and accessibility of research.\nIdentify processes at different stages of scientific research where practices that facilitate reproducibility can be adopted.\nProvide students with experience in applying the tools provided through internships and individual projects."
  },
  {
    "objectID": "r_basics.html#objetives",
    "href": "r_basics.html#objetives",
    "title": "R basics",
    "section": "Objetives",
    "text": "Objetives\n\nRevisit the basic syntax and data structures in R\nGet familiar with documentation and help resources"
  },
  {
    "objectID": "r_basics.html#what-is-r",
    "href": "r_basics.html#what-is-r",
    "title": "R basics",
    "section": "1 What is R?",
    "text": "1 What is R?\n\nA free Domain-Specific-Language (DSL) for statistics and data analysis\nA collection of over 19514 (may-12-2023) libraries\nA large and active community across industry and academia\nA way to talk “directly” to your computer\n\nHistorically:\n\nBased on the S Programming Language\nAround 20 years old (Lineage dates from 1975 - almost 40 years ago)"
  },
  {
    "objectID": "r_basics.html#rstudio",
    "href": "r_basics.html#rstudio",
    "title": "R basics",
    "section": "2 Rstudio",
    "text": "2 Rstudio\nIntegrated development environment (IDE) for R. Includes:\n\nA console\nSyntax-highlighting editor that supports direct code execution\nTools for plotting, history, debugging and workspace management"
  },
  {
    "objectID": "r_basics.html#elements-of-the-r-language",
    "href": "r_basics.html#elements-of-the-r-language",
    "title": "R basics",
    "section": "3 Elements of the R language",
    "text": "3 Elements of the R language\n\nVectors\nLists\nMatrices\nData Frames\nFunctions (including operators)\nAttributes\nTables\nArrays\nEnvironments\n\nData structure\nThe basic data structure in R is the vector. There are two basic types of vectors: atomic vectors and lists.\nThey have three common properties:\n\nType, typeof() (~ class/mode)\nLength, length() (number of elements)\nAttributes, attributes() (metadata)\n\nThey differ in the types of their elements: all elements of an atomic vector must be the same type, whereas the elements of a list can have different types.\n\n\n\n\n\n\n\nHomogeneous\nHeterogeneous\n\n\n\n\n1d\nAtomic vector\nList\n\n\n2d\nMatrix\nData frame\n\n\nnd\nArray\n\n\n\n\n\n\n\n \nR has no 0-dimensional elements (scalars). Individual numbers or strings are actually vectors of length one.\nAtomic vectors\nTypes of atomic vectors:\n\nLogical (boolean)\nInteger\nNumeric (double)\nCharacter\n\nVectors are built using c():\n\n\nCode\n\nx &lt;- 1\nx1 &lt;- c(1)\n\nall.equal(x, x1)\n## [1] TRUE\n\nclass(x)\n## [1] \"numeric\"\n\ny &lt;- \"something\"\n\nclass(y)\n## [1] \"character\"\n\nw &lt;- 1L\n\nclass(w)\n## [1] \"integer\"\n \nz &lt;- TRUE\n\nclass(z)\n## [1] \"logical\"\n\nq &lt;- factor(1)\n\nclass(q)\n## [1] \"factor\"\n\n\n \nVectors can only contain entries of the same type. Different types will be coerced to the most flexible type:\n\n\nCode\n\nv &lt;- c(10, 11, 12, 13)\n\nclass(v)\n## [1] \"numeric\"\n\nis.integer(v)\n## [1] FALSE\n\ny &lt;- c(\"Amazona\", \"Ara\", \"Eupsittula\", \"Myiopsitta\")\n\nclass(y)\n## [1] \"character\"\n\nis.integer(y)\n## [1] FALSE\n\nx &lt;- c(1,2,3, \"Myiopsitta\")\n\nx\n## [1] \"1\"          \"2\"          \"3\"          \"Myiopsitta\"\n\nclass(x)\n## [1] \"character\"\n\n\n \nMissing values are specified with NA, which is a logical vector of length 1. NA will always be coerced to the correct type if used inside c():\n\n\nCode\n\nv &lt;- c(10, 11, 12, 13, NA)\n\nclass(v)\n## [1] \"numeric\"\n\nv &lt;- c(letters[1:3], NA)\n\nclass(v)\n## [1] \"character\"\n\n\n \nLists\nCan contain objects of different classes and sizes. Lists are built using list():\n\n\nCode\nl &lt;- list(ID = c(\"a\", \"b\", \"c\", \"d\", \"e\"), \n          size = c(1, 2, 3, 4, 5), \n          observed = c(FALSE, TRUE, FALSE, FALSE, FALSE))\n\nl\n\n\n$ID\n[1] \"a\" \"b\" \"c\" \"d\" \"e\"\n\n$size\n[1] 1 2 3 4 5\n\n$observed\n[1] FALSE  TRUE FALSE FALSE FALSE\n\n\nCode\nclass(l)\n\n\n[1] \"list\"\n\n\nCode\nstr(l)\n\n\nList of 3\n $ ID      : chr [1:5] \"a\" \"b\" \"c\" \"d\" ...\n $ size    : num [1:5] 1 2 3 4 5\n $ observed: logi [1:5] FALSE TRUE FALSE FALSE FALSE\n\n\n… and dimensions:\n\n\nCode\nl &lt;- list(ID = c(\"a\", \"b\", \"c\", \"d\", \"e\"), \n          size = c(1, 2, 3, 4, 5, 6), \n          observed = c(FALSE, TRUE, FALSE, FALSE, FALSE), \n          l)\n\nstr(l)\n\n\nList of 4\n $ ID      : chr [1:5] \"a\" \"b\" \"c\" \"d\" ...\n $ size    : num [1:6] 1 2 3 4 5 6\n $ observed: logi [1:5] FALSE TRUE FALSE FALSE FALSE\n $         :List of 3\n  ..$ ID      : chr [1:5] \"a\" \"b\" \"c\" \"d\" ...\n  ..$ size    : num [1:5] 1 2 3 4 5\n  ..$ observed: logi [1:5] FALSE TRUE FALSE FALSE FALSE\n\n\nCode\nl2 &lt;- list(l, l)\n\nstr(l2)\n\n\nList of 2\n $ :List of 4\n  ..$ ID      : chr [1:5] \"a\" \"b\" \"c\" \"d\" ...\n  ..$ size    : num [1:6] 1 2 3 4 5 6\n  ..$ observed: logi [1:5] FALSE TRUE FALSE FALSE FALSE\n  ..$         :List of 3\n  .. ..$ ID      : chr [1:5] \"a\" \"b\" \"c\" \"d\" ...\n  .. ..$ size    : num [1:5] 1 2 3 4 5\n  .. ..$ observed: logi [1:5] FALSE TRUE FALSE FALSE FALSE\n $ :List of 4\n  ..$ ID      : chr [1:5] \"a\" \"b\" \"c\" \"d\" ...\n  ..$ size    : num [1:6] 1 2 3 4 5 6\n  ..$ observed: logi [1:5] FALSE TRUE FALSE FALSE FALSE\n  ..$         :List of 3\n  .. ..$ ID      : chr [1:5] \"a\" \"b\" \"c\" \"d\" ...\n  .. ..$ size    : num [1:5] 1 2 3 4 5\n  .. ..$ observed: logi [1:5] FALSE TRUE FALSE FALSE FALSE\n\n\n \nAttributes\nObjects can have attributes. Attributes allow to store metadata about the object. Attributes are kind of named lists. Attributes can be accessed individually with attr() or all at once (as a list) with attributes():\n\n\nCode\ny &lt;- 1:10\n\nmean(y)\n\n\n[1] 5.5\n\n\nCode\nattr(y, \"my_attribute\") &lt;- \"This is an attribute\"\n\n\nattr(y, \"my_attribute\")\n\n\n[1] \"This is an attribute\"\n\n\nCode\nstr(y)\n\n\n int [1:10] 1 2 3 4 5 6 7 8 9 10\n - attr(*, \"my_attribute\")= chr \"This is an attribute\"\n\n\n \nMost attributes are lost when modifying a vector:\n\n\nCode\nattributes(y[1])\n\n\nNULL\n\n\n \nThe only attributes not lost are the three most important:\n\nNames, a character vector giving each element a name, described in names\nDimensions\nClass\n\n\n\n\nCode\nw &lt;- structure(c(a =1, b = 2), my_attribute = \"This is not an apple\")\n\nattributes(w)\n\n\n$names\n[1] \"a\" \"b\"\n\n$my_attribute\n[1] \"This is not an apple\"\n\n\nCode\nattributes(w[1])\n\n\n$names\n[1] \"a\"\n\n\nCode\nclass(w[1])\n\n\n[1] \"numeric\"\n\n\n \nFactors\nAttributes are used to define factors. A factor is a vector that can contain only predefined values, and is used to store categorical data.\nFactors are built on top of integer vectors using two attributes:\n\nclass “factor”: makes them behave differently from regular integer vectors\nlevels: defines the set of allowed values\n\n\n\nCode\nx &lt;- factor(c(\"a\", \"b\", \"b\", \"a\"))\nx\n\n\n[1] a b b a\nLevels: a b\n\n\nCode\nlevels(x)\n\n\n[1] \"a\" \"b\"\n\n\nCode\nstr(x)\n\n\n Factor w/ 2 levels \"a\",\"b\": 1 2 2 1\n\n\n \nFactors look like character vectors but they are actually integers:\n\n\nCode\nx &lt;- factor(c(\"a\", \"b\", \"b\", \"a\"))\n\nc(x)\n\n\n[1] a b b a\nLevels: a b\n\n\n \nMatrices\nAll entries are of the same type:\n\n\nCode\nm &lt;- matrix(c(1, 2, 3, 11, 12, 13), nrow = 2)\n\ndim(m)\n\n\n[1] 2 3\n\n\nCode\nm\n\n\n     [,1] [,2] [,3]\n[1,]    1    3   12\n[2,]    2   11   13\n\n\nCode\nclass(m)\n\n\n[1] \"matrix\" \"array\" \n\n\nCode\nm &lt;- matrix(c(1, 2, 3, 11, 12,\"13\"), nrow = 2)\nm\n\n\n     [,1] [,2] [,3]\n[1,] \"1\"  \"3\"  \"12\"\n[2,] \"2\"  \"11\" \"13\"\n\n\n \nData frames\nSpecial case of lists. Can contain entries of different types:\n\n\nCode\nm &lt;- data.frame(ID = c(\"a\", \"b\", \"c\", \"d\", \"e\"), \n                size = c(1, 2, 3, 4, 5), \n                observed = c(FALSE, TRUE, FALSE, FALSE, FALSE))\n\ndim(m)\n\n\n[1] 5 3\n\n\nCode\nm\n\n\n\n\n\n\nID\nsize\nobserved\n\n\n\n\na\n1\nFALSE\n\n\nb\n2\nTRUE\n\n\nc\n3\nFALSE\n\n\nd\n4\nFALSE\n\n\ne\n5\nFALSE\n\n\n\n\n\n\nCode\nclass(m)\n\n\n[1] \"data.frame\"\n\n\nCode\nis.data.frame(m)\n\n\n[1] TRUE\n\n\nCode\nis.list(m)\n\n\n[1] TRUE\n\n\nCode\nstr(m)\n\n\n'data.frame':   5 obs. of  3 variables:\n $ ID      : chr  \"a\" \"b\" \"c\" \"d\" ...\n $ size    : num  1 2 3 4 5\n $ observed: logi  FALSE TRUE FALSE FALSE FALSE\n\n\n \nBut vectors should have the same length:\n\n\nCode\nm &lt;- data.frame(ID = c(\"a\", \"b\", \"c\", \"d\", \"e\"), \n                size = c(1, 2, 3, 4, 5, 6), \n                observed = c(FALSE, TRUE, FALSE, FALSE, FALSE))\n\n\nError in data.frame(ID = c(\"a\", \"b\", \"c\", \"d\", \"e\"), size = c(1, 2, 3, : arguments imply differing number of rows: 5, 6"
  },
  {
    "objectID": "r_basics.html#data-subsetting",
    "href": "r_basics.html#data-subsetting",
    "title": "R basics",
    "section": "4 Data subsetting",
    "text": "4 Data subsetting\nIndexing\nElements within objects can be called by indexing. To subset a vector simply call the object position using square brackets:\n\n\nCode\nx &lt;- c(1, 3, 4, 10, 15, 20, 50, 1, 6)\n\nx[1]\n\n\n[1] 1\n\n\nCode\nx[2]\n\n\n[1] 3\n\n\nCode\nx[2:3]\n\n\n[1] 3 4\n\n\nCode\nx[c(1,3)]\n\n\n[1] 1 4\n\n\n \nElements can be removed in the same way:\n\n\nCode\nx[-1]\n\n\n[1]  3  4 10 15 20 50  1  6\n\n\nCode\nx[-c(1,3)]\n\n\n[1]  3 10 15 20 50  1  6\n\n\n \nMatrices and data frames required 2 indices [row, column]:\n\n\nCode\nm &lt;- matrix(c(1, 2, 3, 11, 12, 13), nrow = 2)\n\nm[1, ]\n\n\n[1]  1  3 12\n\n\nCode\nm[, 1]\n\n\n[1] 1 2\n\n\nCode\nm[1, 1]\n\n\n[1] 1\n\n\nCode\nm[-1, ]\n\n\n[1]  2 11 13\n\n\nCode\nm[, -1]\n\n\n     [,1] [,2]\n[1,]    3   12\n[2,]   11   13\n\n\nCode\nm[-1, -1]\n\n\n[1] 11 13\n\n\nCode\ndf &lt;- data.frame(family = c(\"Psittacidae\", \"Trochilidae\", \n                            \"Psittacidae\"), \n  genus = c(\"Amazona\", \"Phaethornis\", \"Ara\"), \n    species = c(\"aestiva\", \"philippii\", \"ararauna\"))\n\ndf\n\n\n\n\n\n\nfamily\ngenus\nspecies\n\n\n\n\nPsittacidae\nAmazona\naestiva\n\n\nTrochilidae\nPhaethornis\nphilippii\n\n\nPsittacidae\nAra\nararauna\n\n\n\n\n\n\nCode\ndf[1, ]\n\n\n\n\n\n\nfamily\ngenus\nspecies\n\n\n\n\nPsittacidae\nAmazona\naestiva\n\n\n\n\n\n\nCode\ndf[, 1]\n\n\n[1] \"Psittacidae\" \"Trochilidae\" \"Psittacidae\"\n\n\nCode\ndf[1, 1]\n\n\n[1] \"Psittacidae\"\n\n\nCode\ndf[-1, ]\n\n\n\n\n\n\n\nfamily\ngenus\nspecies\n\n\n\n\n2\nTrochilidae\nPhaethornis\nphilippii\n\n\n3\nPsittacidae\nAra\nararauna\n\n\n\n\n\n\nCode\ndf[, -1]\n\n\n\n\n\n\ngenus\nspecies\n\n\n\n\nAmazona\naestiva\n\n\nPhaethornis\nphilippii\n\n\nAra\nararauna\n\n\n\n\n\n\nCode\ndf[-1, -1]\n\n\n\n\n\n\n\ngenus\nspecies\n\n\n\n\n2\nPhaethornis\nphilippii\n\n\n3\nAra\nararauna\n\n\n\n\n\n\nCode\ndf[,\"family\"]\n\n\n[1] \"Psittacidae\" \"Trochilidae\" \"Psittacidae\"\n\n\nCode\ndf[,c(\"family\", \"genus\")]\n\n\n\n\n\n\nfamily\ngenus\n\n\n\n\nPsittacidae\nAmazona\n\n\nTrochilidae\nPhaethornis\n\n\nPsittacidae\nAra\n\n\n\n\n\n\n \nLists require 1 index within double square brackets [[index]]:\n\n\nCode\nl &lt;- list(ID = c(\"a\", \"b\", \"c\", \"d\", \"e\"), size = c(1, 2, 3, 4, 5), observed = c(FALSE, TRUE, FALSE, FALSE, FALSE))\n\nl[[1]]\n\n\n[1] \"a\" \"b\" \"c\" \"d\" \"e\"\n\n\nCode\nl[[3]]\n\n\n[1] FALSE  TRUE FALSE FALSE FALSE\n\n\n \nElements within lists can also be subset in the same string of code:\n\n\nCode\nl[[1]][1:2]\n\n\n[1] \"a\" \"b\"\n\n\nCode\nl[[3]][2]\n\n\n[1] TRUE\n\n\n \nExploring objects\n\n\nCode\nstr(df)\n\n\n'data.frame':   3 obs. of  3 variables:\n $ family : chr  \"Psittacidae\" \"Trochilidae\" \"Psittacidae\"\n $ genus  : chr  \"Amazona\" \"Phaethornis\" \"Ara\"\n $ species: chr  \"aestiva\" \"philippii\" \"ararauna\"\n\n\nCode\nnames(df)\n\n\n[1] \"family\"  \"genus\"   \"species\"\n\n\nCode\ndim(df)\n\n\n[1] 3 3\n\n\nCode\nnrow(df)\n\n\n[1] 3\n\n\nCode\nncol(df)\n\n\n[1] 3\n\n\nCode\nhead(df)\n\n\n\n\n\n\nfamily\ngenus\nspecies\n\n\n\n\nPsittacidae\nAmazona\naestiva\n\n\nTrochilidae\nPhaethornis\nphilippii\n\n\nPsittacidae\nAra\nararauna\n\n\n\n\n\n\nCode\ntail(df)\n\n\n\n\n\n\nfamily\ngenus\nspecies\n\n\n\n\nPsittacidae\nAmazona\naestiva\n\n\nTrochilidae\nPhaethornis\nphilippii\n\n\nPsittacidae\nAra\nararauna\n\n\n\n\n\n\nCode\ntable(df$genus)\n\n\n\n    Amazona         Ara Phaethornis \n          1           1           1 \n\n\nCode\ntypeof(df)\n\n\n[1] \"list\"\n\n\n\n\nCode\nView(df)\n\n\n \n\nExercise\n \n\nUsing the example data iris to create a data subset with only the observations of the species ‘setosa’\nNow create a data subset containing the observations of both ‘setosa’ and ‘versicolor’\nAlso with iris create a data subset with the observations for which iris$Sepal.length is higher than 6\nHow many observations have a sepal length higher than 6?"
  },
  {
    "objectID": "r_basics.html#functions",
    "href": "r_basics.html#functions",
    "title": "R basics",
    "section": "5 Functions",
    "text": "5 Functions\nAll functions are created by the function function() and follow the same structure:\n\n* Modified from Grolemund 2014  \nR comes with many functions that you can use to do sophisticated tasks:\n\n\nCode\n# built in functions\nbi &lt;- builtins()\n\nlength(bi)\n\n\n[1] 1388\n\n\nCode\nsample(bi, 10)\n\n\n [1] \"&lt;=\"                   \"Sys.setlocale\"        \"intToUtf8\"           \n [4] \"rep.difftime\"         \"is.qr\"                \"suppressWarnings\"    \n [7] \"as.character.hexmode\" \"conflictRules\"        \".row\"                \n[10] \"match\"               \n\n\n \nOperators are functions:\n\n\nCode\n1 + 1\n\n\n[1] 2\n\n\nCode\n'+'(1, 1)\n\n\n[1] 2\n\n\nCode\n2 * 3\n\n\n[1] 6\n\n\nCode\n'*'(2, 3)\n\n\n[1] 6\n\n\n \nMost commonly used R operators\nArithmetic operators:\n\n\n                                 Operator       Description        \nc.......addition..               \"+\"            \"addition\"         \nc.......subtraction..            \"-\"            \"subtraction\"      \nc.......multiplication..         \"*\"            \"multiplication\"   \nc.......division..               \"/\"            \"division\"         \nc....or.......exponent..         \"^ or **\"      \"exponent\"         \nc..x....y....modulus..x.mod.y... \"x %% y\"       \"modulus (x mod y)\"\nc..x.....y....integer.division.. \"x %/% y\"      \"integer division\" \n\n\n\n\nCode\n1 - 2\n\n\n[1] -1\n\n\nCode\n1 + 2\n\n\n[1] 3\n\n\nCode\n2 ^ 2\n\n\n[1] 4\n\n\n \nLogical operators:\n\n\n                                    Operator    Description               \nc.......less.than..                 \"&lt;\"         \"less than\"               \nc........less.than.or.equal.to..    \"&lt;=\"        \"less than or equal to\"   \nc.......greater.than..              \"&gt;\"         \"greater than\"            \nc........greater.than.or.equal.to.. \"&gt;=\"        \"greater than or equal to\"\nc........exactly.equal.to..         \"==\"        \"exactly equal to\"        \nc........not.equal.to..             \"!=\"        \"not equal to\"            \nc...x....Not.x..                    \"!x\"        \"Not x\"                   \nc..x...y.....tx.OR.y..              \"x | y\"     \"\\tx OR y\"                \nc..x...y....x.AND.y..               \"x & y\"     \"x AND y\"                 \nc..x..in..y....match..              \"x %in% y\"  \"match\"                   \n\n\n\n\nCode\n1 &lt; 2 \n\n\n[1] TRUE\n\n\nCode\n1 &gt; 2 \n\n\n[1] FALSE\n\n\nCode\n1 &lt;= 2 \n\n\n[1] TRUE\n\n\nCode\n1 == 2\n\n\n[1] FALSE\n\n\nCode\n1 != 2\n\n\n[1] TRUE\n\n\nCode\n1 &gt; 2 \n\n\n[1] FALSE\n\n\nCode\n5 %in% 1:6\n\n\n[1] TRUE\n\n\nCode\n5 %in% 1:4\n\n\n[1] FALSE\n\n\n \nMost functions are vectorized:\n\n\nCode\n1:6 * 1:6\n\n\n\n* Modified from Grolemund & Wickham 2017\n \n\n\n[1]  1  4  9 16 25 36\n\n\n\n\nCode\n1:6 - 1:6\n\n\n[1] 0 0 0 0 0 0\n\n\nR recycles vectors of unequal length:\n\n\nCode\n1:6 * 1:5\n\n\n\n* Modified from Grolemund & Wickham 2017\n \n\n\nWarning in 1:6 * 1:5: comprimento do objeto maior não é múltiplo do comprimento\ndo objeto menor\n\n\n[1]  1  4  9 16 25  6\n\n\n\n\nCode\n1:6 + 1:5\n\n\nWarning in 1:6 + 1:5: comprimento do objeto maior não é múltiplo do comprimento\ndo objeto menor\n\n\n[1]  2  4  6  8 10  7"
  },
  {
    "objectID": "r_basics.html#style-matters",
    "href": "r_basics.html#style-matters",
    "title": "R basics",
    "section": "6 Style matters",
    "text": "6 Style matters\nBased on google’s R Style Guide\nFile names\nFile names should end in .R and, of course, be meaningful:\n\nGOOD: predict_ad_revenue.R\nBAD: foo.R\n\nObject names\nVariables and functions:\n\nLowercase\nUse an underscore (_) (HW style)\nGenerally, nouns for variables and verbs for functions\nStrive for names that are concise and meaningful (not always easy)\nAvoid using names of existing functions of variables\n\n\n\nCode\n  - GOOD: day_one: day_1, mean.day(),\n  \n  - BAD: dayOne, day1, firstDay_of.month, mean &lt;- function(x) sum(x), c &lt;- 10\n\n\n \nSyntax\nSpacing:\n\nUse spaces around operators and for argument within a function\nAlways put a space after a comma, and never before (just like in regular English)\nPlace a space before left parenthesis, except in a function call\n\n\n\nCode\n  - GOOD: \n          a &lt;- rnorm(n = 10, sd = 10, mean = 1)\n          tab.prior &lt;- table(df[df$days.from.opt &lt; 0, \"campaign.id\"])\n          total &lt;- sum(x[, 1])\n          total &lt;- sum(x[1, ])\n          if (debug)\n          mean(1:10)\n          \n  - BAD: \n         a&lt;-rnorm(n=10,sd=10,mean=1)\n         tab.prior &lt;- table(df[df$days.from.opt&lt;0, \"campaign.id\"])  # Needs spaces around '&lt;'\n         tab.prior &lt;- table(df[df$days.from.opt &lt; 0,\"campaign.id\"])  # Needs a space after the comma\n         tab.prior&lt;- table(df[df$days.from.opt &lt; 0, \"campaign.id\"])  # Needs a space before &lt;-\n         tab.prior&lt;-table(df[df$days.from.opt &lt; 0, \"campaign.id\"])  # Needs spaces around &lt;-\n         total &lt;- sum(x[,1])  # Needs a space after the comma\n         total &lt;- sum(x[ ,1])  # Needs a space after the comma, not before  \n         if(debug) # Needs a space before parenthesis\n         mean (1:10) # ) # Extra space before parenthesis\n\n\n \nCurly braces:\n\nAn opening curly brace should never go on its own line\nClosing curly brace should always go on its own line\nYou may omit curly braces when a block consists of a single statement\n\n\n\nCode\n  - GOOD:\n              if (is.null(ylim)) {\n              ylim &lt;- c(0, 0.06)\n            }\n                      \n            if (is.null(ylim))\n              ylim &lt;- c(0, 0.06)\n          \n  - BAD:\n            \n         if (is.null(ylim)) ylim &lt;- c(0, 0.06)\n                    \n         if (is.null(ylim)) {ylim &lt;- c(0, 0.06)} \n\n         if (is.null(ylim)) {\n           ylim &lt;- c(0, 0.06)\n           } \n\n\n \nAssigments:\n\nUse &lt;-, not =\n\n\n\nCode\n  - GOOD:\n         x &lt;- 5 \n          \n  - BAD:\n         x = 5\n\n\n \nCommenting guidelines:\n\nComment your code\nEntire commented lines should begin with # and one space\nShort comments can be placed after code preceded by two spaces, #, and then one space\n\n\n\nCode\n# Create histogram of frequency of campaigns by pct budget spent.\nhist(df$pct.spent,\n     breaks = \"scott\",  # method for choosing number of buckets\n     main   = \"Histogram: fraction budget spent by campaignid\",\n     xlab   = \"Fraction of budget spent\",\n     ylab   = \"Frequency (count of campaignids)\")\n\n\n \nGeneral Layout and Ordering (google style):\n\nCopyright statement comment (?)\nAuthor comment\nFile description comment, including purpose of program, inputs, and outputs\nsource() and library() statements\nFunction definitions\nExecuted statements, if applicable (e.g., print, plot)"
  },
  {
    "objectID": "r_basics.html#r-documentation",
    "href": "r_basics.html#r-documentation",
    "title": "R basics",
    "section": "7 R documentation",
    "text": "7 R documentation\nMost R resources are extremely well documented. So the first source for help you should go to when writting R code is the R documention itself. All packages are documented in the same standard way. Getting familiar with the format can simplify things a lot.\nPackage documentation\n\n \nReference manuals\nReference manuals are collections of the documentation for all functions in a package (only 1 per package):\n\ndynaSpec manual\nbaRulho manual\n\n \nFunction documentation\nAll functions (default or from loaded packages) must have a documentation that follows a standard format:\n\n\nCode\n?mean\n\nhelp(\"mean\")\n\n\n  \nThis documentation can also be shown in Rstudio by pressing F1 when the cursor is on the function name\n \nIf you don’t recall the function name try apropos():\n\n\nCode\napropos(\"mean\")\n\n\n [1] \".colMeans\"     \".rowMeans\"     \"colMeans\"      \"kmeans\"       \n [5] \"mean\"          \"mean.Date\"     \"mean.default\"  \"mean.difftime\"\n [9] \"mean.POSIXct\"  \"mean.POSIXlt\"  \"rowMeans\"      \"weighted.mean\"\n\n\n \nVignettes\nVignettes are illustrative documents or study cases detailing the use of a package (optional, can be several per package).\nVignettes can be called directly from R:\n\n\nCode\nvgn &lt;- browseVignettes() \n\n\n\n\nCode\nvignette()\n\n\nThey should also be listed in the package CRAN page.\n \nDemonstrations\nPackages may also include extended code demonstrations (‘demos’). To list demos in a package run demo(\"package name\"):\n\n\nCode\ndemo(package=\"stats\")\n\n# call demo directly\ndemo(\"nlm\")\n\n\n \n\nExercise\n \n\nWhat does the function cut() do?\nWhat is the breaks argument in cut() used for?\nRun the first 4 lines of code in the examples supplied in the cut() documentation\nHow many vignettes does the package warbleR has?"
  },
  {
    "objectID": "r_basics.html#references",
    "href": "r_basics.html#references",
    "title": "R basics",
    "section": "8 References",
    "text": "8 References\n\nAdvanced R, H Wickham\nGoogle’s R Style Guide\n\nHands-On Programming with R (Grolemund, 2014)"
  },
  {
    "objectID": "course_prep.html",
    "href": "course_prep.html",
    "title": "Reproducible Science Workshop, REU OTS 2024",
    "section": "",
    "text": "Install or update R on the computer you will use during the course (https://cran.r-project.org). I assume that you already have it installed, but try to update it if you have a R version &lt; 4.0.0. You can find which R version you have by running this in the R console:\n\n\n\nCode\nversion$version.string\n\n\n\nUpdate all R packages if you already had R installed (⚠️ this step can take a long time to run ⚠️):\n\n\n\nCode\nupdate.packages(ask = FALSE)\n\n\n\nInstall or update the RStudio interface (https://www.rstudio.com/products/rstudio/download/, choose the free version). Optional but advised.\nMake a directory called “OTS_REU_OS_2024”, this will be your working directory for the course.\nOpen RStudio and select the tab “Tools” then “Global Options” (last option). Select the “Code” option, then select the box for “Soft-wrap R source files”.\nAlso in RStudio: Select the “Pane Layout” option and move “Source” to the top left pane and “Console” to the top right pane. For those of you unfamiliar with RStudio, the source is your script, where you save code in a physical file (usually .R script) and the console prints the output of the code you run from the source. You can write code in the console, but it will not be saved in a physical file. This layout allocates more screen space to the most useful panes. Hit “Apply” and “Ok”.\nAlso in RStudio: Go back up to the “File” tab and select “New Project”, then select the “OTS_REU_OS_2024” directory.\nNow in the R console in RStudio: Run the following code to install some R packages (remove the packages first if you have them installed already).\n\n\n\nCode\n# package to install other packages from github\ninstall.packages(\"remotes\") \n\n# install from github\nremotes::install_github(\"maRce10/sketchy\")\n\n\n\nInstall git (https://git-scm.com/book/en/v2/Getting-Started-Installing-Git)\nCreate a github account (https://github.com/signup)\nInstall github desktop (https://docs.github.com/en/desktop/installing-and-authenticating-to-github-desktop/installing-github-desktop)\nOn github desktop go in into your github account using github\n\n\nA few tips to make sure you will take full advantage of the course:\n\nIdeally, read the materials ahead of time (I know! it’s time consuming)\nMake sure you have anything you need before the start of the class\nBe ready a few minutes before the start of the class\nTry to focus as much as possible in the course, close other programs or unnecessary internet browser tabs (i.e. instagram, twitter, etc). This will also make the computer more efficient (less likely to get slow)\nComment your code"
  },
  {
    "objectID": "instructor.html",
    "href": "instructor.html",
    "title": "",
    "section": "",
    "text": "Code\n\n\n\n\n\nMarcelo Araya-Salas\n\n\n\n\n\nI am just another behavioral ecologists that ended up doing a lot of coding just to get data analysis done. So now I’m deeply involved in the development of computational tools for (non-genetic) biological data analysis, mostly related to animal behavior and bioacoustics. I am the developer and maintainer of the R packages warbleR and Rraven that provide functions to streamline high-throughput acoustic analysis of animal sounds, aiming to simplify the use of R for bioacoustic research. More recently I released the R packages baRulho, to quantify acoustic signal transmission and degradation, ohun, to optimize automatic detection and PhenotypeSpace for quantifying multidimensional trait spaces. Also check out the new R package sketchy for organizing research compendiums. New functions as well as other more elaborated analyses are detailed in my blog Bioacoustics in R."
  }
]