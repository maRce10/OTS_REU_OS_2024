[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Reproducible Science Workshop, REU OTS 2024",
    "section": "",
    "text": "Reproducible Science Workshop\n\n\nOrganization For Tropical Studies\n\n\n\nMarcelo Araya-Salas, PhD\n\n\n\nApril, 2024\n\n\n\n\n \nScientific production currently suffers from a lack of reproducibility (the ability to recreate a study based on published information), due to the poor documentation of the methods and analyses used, as well as the lack of access to the data generated. Biology has not escaped this crisis of scientific reproducibility, which affects the credibility of our community. Fortunately, in response to this crisis, a multitude of tools have been developed, in most cases freely available, to increase the transparency and accessibility of data supporting the conclusions of scientific studies. Making these tools available to the scientific community and encouraging their use early in the training of researchers is critical to solving the reproducibility crisis. These tools revolve around three main axes: 1) online repositories for sharing data and research products, 2) open access digital tools, and 3) the implementation of good data management and analysis practices**. These three axes represent the modules in which the course is organized. This course aims to deepen the use of tools (mostly digital) as well as good practices along each of the common stages of the each of the stages common to the development of research projects in biology.\n\nObjetives\n\nTo raise awareness of the current problem of scientific reproducibility and its implications for the production of knowledge and its legitimacy in society.\nTo provide students with free software computational tools that facilitate the documentation and accessibility of research.\nIdentify processes at different stages of scientific research where practices that facilitate reproducibility can be adopted.\nProvide students with experience in applying the tools provided through practices."
  },
  {
    "objectID": "r_basics.html#objetives",
    "href": "r_basics.html#objetives",
    "title": "R basics",
    "section": "Objetives",
    "text": "Objetives\n\nRevisit the basic syntax and data structures in R\nGet familiar with documentation and help resources"
  },
  {
    "objectID": "r_basics.html#what-is-r",
    "href": "r_basics.html#what-is-r",
    "title": "R basics",
    "section": "1 What is R?",
    "text": "1 What is R?\n\nA free Domain-Specific-Language (DSL) for statistics and data analysis\nA collection of over 19514 (may-12-2023) libraries\nA large and active community across industry and academia\nA way to talk “directly” to your computer\n\nHistorically:\n\nBased on the S Programming Language\nAround 20 years old (Lineage dates from 1975 - almost 40 years ago)"
  },
  {
    "objectID": "r_basics.html#rstudio",
    "href": "r_basics.html#rstudio",
    "title": "R basics",
    "section": "2 Rstudio",
    "text": "2 Rstudio\nIntegrated development environment (IDE) for R. Includes:\n\nA console\nSyntax-highlighting editor that supports direct code execution\nTools for plotting, history, debugging and workspace management"
  },
  {
    "objectID": "r_basics.html#elements-of-the-r-language",
    "href": "r_basics.html#elements-of-the-r-language",
    "title": "R basics",
    "section": "3 Elements of the R language",
    "text": "3 Elements of the R language\n\nVectors\nLists\nMatrices\nData Frames\nFunctions (including operators)\nAttributes\nTables\nArrays\nEnvironments\n\nData structure\nThe basic data structure in R is the vector. There are two basic types of vectors: atomic vectors and lists.\nThey have three common properties:\n\nType, typeof() (~ class/mode)\nLength, length() (number of elements)\nAttributes, attributes() (metadata)\n\nThey differ in the types of their elements: all elements of an atomic vector must be the same type, whereas the elements of a list can have different types.\n\n\n\n\n\n\n\nHomogeneous\nHeterogeneous\n\n\n\n\n1d\nAtomic vector\nList\n\n\n2d\nMatrix\nData frame\n\n\nnd\nArray\n\n\n\n\n\n\n\n \nR has no 0-dimensional elements (scalars). Individual numbers or strings are actually vectors of length one.\nAtomic vectors\nTypes of atomic vectors:\n\nLogical (boolean)\nInteger\nNumeric (double)\nCharacter\n\nVectors are built using c():\n\n\nCode\n\nx &lt;- 1\nx1 &lt;- c(1)\n\nall.equal(x, x1)\n## [1] TRUE\n\nclass(x)\n## [1] \"numeric\"\n\ny &lt;- \"something\"\n\nclass(y)\n## [1] \"character\"\n\nw &lt;- 1L\n\nclass(w)\n## [1] \"integer\"\n \nz &lt;- TRUE\n\nclass(z)\n## [1] \"logical\"\n\nq &lt;- factor(1)\n\nclass(q)\n## [1] \"factor\"\n\n\n \nVectors can only contain entries of the same type. Different types will be coerced to the most flexible type:\n\n\nCode\n\nv &lt;- c(10, 11, 12, 13)\n\nclass(v)\n## [1] \"numeric\"\n\nis.integer(v)\n## [1] FALSE\n\ny &lt;- c(\"Amazona\", \"Ara\", \"Eupsittula\", \"Myiopsitta\")\n\nclass(y)\n## [1] \"character\"\n\nis.integer(y)\n## [1] FALSE\n\nx &lt;- c(1,2,3, \"Myiopsitta\")\n\nx\n## [1] \"1\"          \"2\"          \"3\"          \"Myiopsitta\"\n\nclass(x)\n## [1] \"character\"\n\n\n \nMissing values are specified with NA, which is a logical vector of length 1. NA will always be coerced to the correct type if used inside c():\n\n\nCode\n\nv &lt;- c(10, 11, 12, 13, NA)\n\nclass(v)\n## [1] \"numeric\"\n\nv &lt;- c(letters[1:3], NA)\n\nclass(v)\n## [1] \"character\"\n\n\n \nLists\nCan contain objects of different classes and sizes. Lists are built using list():\n\n\nCode\nl &lt;- list(ID = c(\"a\", \"b\", \"c\", \"d\", \"e\"), \n          size = c(1, 2, 3, 4, 5), \n          observed = c(FALSE, TRUE, FALSE, FALSE, FALSE))\n\nl\n\n\n$ID\n[1] \"a\" \"b\" \"c\" \"d\" \"e\"\n\n$size\n[1] 1 2 3 4 5\n\n$observed\n[1] FALSE  TRUE FALSE FALSE FALSE\n\n\nCode\nclass(l)\n\n\n[1] \"list\"\n\n\nCode\nstr(l)\n\n\nList of 3\n $ ID      : chr [1:5] \"a\" \"b\" \"c\" \"d\" ...\n $ size    : num [1:5] 1 2 3 4 5\n $ observed: logi [1:5] FALSE TRUE FALSE FALSE FALSE\n\n\n… and dimensions:\n\n\nCode\nl &lt;- list(ID = c(\"a\", \"b\", \"c\", \"d\", \"e\"), \n          size = c(1, 2, 3, 4, 5, 6), \n          observed = c(FALSE, TRUE, FALSE, FALSE, FALSE), \n          l)\n\nstr(l)\n\n\nList of 4\n $ ID      : chr [1:5] \"a\" \"b\" \"c\" \"d\" ...\n $ size    : num [1:6] 1 2 3 4 5 6\n $ observed: logi [1:5] FALSE TRUE FALSE FALSE FALSE\n $         :List of 3\n  ..$ ID      : chr [1:5] \"a\" \"b\" \"c\" \"d\" ...\n  ..$ size    : num [1:5] 1 2 3 4 5\n  ..$ observed: logi [1:5] FALSE TRUE FALSE FALSE FALSE\n\n\nCode\nl2 &lt;- list(l, l)\n\nstr(l2)\n\n\nList of 2\n $ :List of 4\n  ..$ ID      : chr [1:5] \"a\" \"b\" \"c\" \"d\" ...\n  ..$ size    : num [1:6] 1 2 3 4 5 6\n  ..$ observed: logi [1:5] FALSE TRUE FALSE FALSE FALSE\n  ..$         :List of 3\n  .. ..$ ID      : chr [1:5] \"a\" \"b\" \"c\" \"d\" ...\n  .. ..$ size    : num [1:5] 1 2 3 4 5\n  .. ..$ observed: logi [1:5] FALSE TRUE FALSE FALSE FALSE\n $ :List of 4\n  ..$ ID      : chr [1:5] \"a\" \"b\" \"c\" \"d\" ...\n  ..$ size    : num [1:6] 1 2 3 4 5 6\n  ..$ observed: logi [1:5] FALSE TRUE FALSE FALSE FALSE\n  ..$         :List of 3\n  .. ..$ ID      : chr [1:5] \"a\" \"b\" \"c\" \"d\" ...\n  .. ..$ size    : num [1:5] 1 2 3 4 5\n  .. ..$ observed: logi [1:5] FALSE TRUE FALSE FALSE FALSE\n\n\n \nAttributes\nObjects can have attributes. Attributes allow to store metadata about the object. Attributes are kind of named lists. Attributes can be accessed individually with attr() or all at once (as a list) with attributes():\n\n\nCode\ny &lt;- 1:10\n\nmean(y)\n\n\n[1] 5.5\n\n\nCode\nattr(y, \"my_attribute\") &lt;- \"This is an attribute\"\n\n\nattr(y, \"my_attribute\")\n\n\n[1] \"This is an attribute\"\n\n\nCode\nstr(y)\n\n\n int [1:10] 1 2 3 4 5 6 7 8 9 10\n - attr(*, \"my_attribute\")= chr \"This is an attribute\"\n\n\n \nMost attributes are lost when modifying a vector:\n\n\nCode\nattributes(y[1])\n\n\nNULL\n\n\n \nThe only attributes not lost are the three most important:\n\nNames, a character vector giving each element a name, described in names\nDimensions\nClass\n\n\n\n\nCode\nw &lt;- structure(c(a =1, b = 2), my_attribute = \"This is not an apple\")\n\nattributes(w)\n\n\n$names\n[1] \"a\" \"b\"\n\n$my_attribute\n[1] \"This is not an apple\"\n\n\nCode\nattributes(w[1])\n\n\n$names\n[1] \"a\"\n\n\nCode\nclass(w[1])\n\n\n[1] \"numeric\"\n\n\n \nFactors\nAttributes are used to define factors. A factor is a vector that can contain only predefined values, and is used to store categorical data.\nFactors are built on top of integer vectors using two attributes:\n\nclass “factor”: makes them behave differently from regular integer vectors\nlevels: defines the set of allowed values\n\n\n\nCode\nx &lt;- factor(c(\"a\", \"b\", \"b\", \"a\"))\nx\n\n\n[1] a b b a\nLevels: a b\n\n\nCode\nlevels(x)\n\n\n[1] \"a\" \"b\"\n\n\nCode\nstr(x)\n\n\n Factor w/ 2 levels \"a\",\"b\": 1 2 2 1\n\n\n \nFactors look like character vectors but they are actually integers:\n\n\nCode\nx &lt;- factor(c(\"a\", \"b\", \"b\", \"a\"))\n\nc(x)\n\n\n[1] a b b a\nLevels: a b\n\n\n \nMatrices\nAll entries are of the same type:\n\n\nCode\nm &lt;- matrix(c(1, 2, 3, 11, 12, 13), nrow = 2)\n\ndim(m)\n\n\n[1] 2 3\n\n\nCode\nm\n\n\n     [,1] [,2] [,3]\n[1,]    1    3   12\n[2,]    2   11   13\n\n\nCode\nclass(m)\n\n\n[1] \"matrix\" \"array\" \n\n\nCode\nm &lt;- matrix(c(1, 2, 3, 11, 12,\"13\"), nrow = 2)\nm\n\n\n     [,1] [,2] [,3]\n[1,] \"1\"  \"3\"  \"12\"\n[2,] \"2\"  \"11\" \"13\"\n\n\n \nData frames\nSpecial case of lists. Can contain entries of different types:\n\n\nCode\nm &lt;- data.frame(ID = c(\"a\", \"b\", \"c\", \"d\", \"e\"), \n                size = c(1, 2, 3, 4, 5), \n                observed = c(FALSE, TRUE, FALSE, FALSE, FALSE))\n\ndim(m)\n\n\n[1] 5 3\n\n\nCode\nm\n\n\n\n\n\n\nID\nsize\nobserved\n\n\n\n\na\n1\nFALSE\n\n\nb\n2\nTRUE\n\n\nc\n3\nFALSE\n\n\nd\n4\nFALSE\n\n\ne\n5\nFALSE\n\n\n\n\n\n\nCode\nclass(m)\n\n\n[1] \"data.frame\"\n\n\nCode\nis.data.frame(m)\n\n\n[1] TRUE\n\n\nCode\nis.list(m)\n\n\n[1] TRUE\n\n\nCode\nstr(m)\n\n\n'data.frame':   5 obs. of  3 variables:\n $ ID      : chr  \"a\" \"b\" \"c\" \"d\" ...\n $ size    : num  1 2 3 4 5\n $ observed: logi  FALSE TRUE FALSE FALSE FALSE\n\n\n \nBut vectors should have the same length:\n\n\nCode\nm &lt;- data.frame(ID = c(\"a\", \"b\", \"c\", \"d\", \"e\"), \n                size = c(1, 2, 3, 4, 5, 6), \n                observed = c(FALSE, TRUE, FALSE, FALSE, FALSE))\n\n\nError in data.frame(ID = c(\"a\", \"b\", \"c\", \"d\", \"e\"), size = c(1, 2, 3, : arguments imply differing number of rows: 5, 6"
  },
  {
    "objectID": "r_basics.html#data-subsetting",
    "href": "r_basics.html#data-subsetting",
    "title": "R basics",
    "section": "4 Data subsetting",
    "text": "4 Data subsetting\nIndexing\nElements within objects can be called by indexing. To subset a vector simply call the object position using square brackets:\n\n\nCode\nx &lt;- c(1, 3, 4, 10, 15, 20, 50, 1, 6)\n\nx[1]\n\n\n[1] 1\n\n\nCode\nx[2]\n\n\n[1] 3\n\n\nCode\nx[2:3]\n\n\n[1] 3 4\n\n\nCode\nx[c(1,3)]\n\n\n[1] 1 4\n\n\n \nElements can be removed in the same way:\n\n\nCode\nx[-1]\n\n\n[1]  3  4 10 15 20 50  1  6\n\n\nCode\nx[-c(1,3)]\n\n\n[1]  3 10 15 20 50  1  6\n\n\n \nMatrices and data frames required 2 indices [row, column]:\n\n\nCode\nm &lt;- matrix(c(1, 2, 3, 11, 12, 13), nrow = 2)\n\nm[1, ]\n\n\n[1]  1  3 12\n\n\nCode\nm[, 1]\n\n\n[1] 1 2\n\n\nCode\nm[1, 1]\n\n\n[1] 1\n\n\nCode\nm[-1, ]\n\n\n[1]  2 11 13\n\n\nCode\nm[, -1]\n\n\n     [,1] [,2]\n[1,]    3   12\n[2,]   11   13\n\n\nCode\nm[-1, -1]\n\n\n[1] 11 13\n\n\nCode\ndf &lt;- data.frame(family = c(\"Psittacidae\", \"Trochilidae\", \n                            \"Psittacidae\"), \n  genus = c(\"Amazona\", \"Phaethornis\", \"Ara\"), \n    species = c(\"aestiva\", \"philippii\", \"ararauna\"))\n\ndf\n\n\n\n\n\n\nfamily\ngenus\nspecies\n\n\n\n\nPsittacidae\nAmazona\naestiva\n\n\nTrochilidae\nPhaethornis\nphilippii\n\n\nPsittacidae\nAra\nararauna\n\n\n\n\n\n\nCode\ndf[1, ]\n\n\n\n\n\n\nfamily\ngenus\nspecies\n\n\n\n\nPsittacidae\nAmazona\naestiva\n\n\n\n\n\n\nCode\ndf[, 1]\n\n\n[1] \"Psittacidae\" \"Trochilidae\" \"Psittacidae\"\n\n\nCode\ndf[1, 1]\n\n\n[1] \"Psittacidae\"\n\n\nCode\ndf[-1, ]\n\n\n\n\n\n\n\nfamily\ngenus\nspecies\n\n\n\n\n2\nTrochilidae\nPhaethornis\nphilippii\n\n\n3\nPsittacidae\nAra\nararauna\n\n\n\n\n\n\nCode\ndf[, -1]\n\n\n\n\n\n\ngenus\nspecies\n\n\n\n\nAmazona\naestiva\n\n\nPhaethornis\nphilippii\n\n\nAra\nararauna\n\n\n\n\n\n\nCode\ndf[-1, -1]\n\n\n\n\n\n\n\ngenus\nspecies\n\n\n\n\n2\nPhaethornis\nphilippii\n\n\n3\nAra\nararauna\n\n\n\n\n\n\nCode\ndf[,\"family\"]\n\n\n[1] \"Psittacidae\" \"Trochilidae\" \"Psittacidae\"\n\n\nCode\ndf[,c(\"family\", \"genus\")]\n\n\n\n\n\n\nfamily\ngenus\n\n\n\n\nPsittacidae\nAmazona\n\n\nTrochilidae\nPhaethornis\n\n\nPsittacidae\nAra\n\n\n\n\n\n\n \nLists require 1 index within double square brackets [[index]]:\n\n\nCode\nl &lt;- list(ID = c(\"a\", \"b\", \"c\", \"d\", \"e\"), size = c(1, 2, 3, 4, 5), observed = c(FALSE, TRUE, FALSE, FALSE, FALSE))\n\nl[[1]]\n\n\n[1] \"a\" \"b\" \"c\" \"d\" \"e\"\n\n\nCode\nl[[3]]\n\n\n[1] FALSE  TRUE FALSE FALSE FALSE\n\n\n \nElements within lists can also be subset in the same string of code:\n\n\nCode\nl[[1]][1:2]\n\n\n[1] \"a\" \"b\"\n\n\nCode\nl[[3]][2]\n\n\n[1] TRUE\n\n\n \nExploring objects\n\n\nCode\nstr(df)\n\n\n'data.frame':   3 obs. of  3 variables:\n $ family : chr  \"Psittacidae\" \"Trochilidae\" \"Psittacidae\"\n $ genus  : chr  \"Amazona\" \"Phaethornis\" \"Ara\"\n $ species: chr  \"aestiva\" \"philippii\" \"ararauna\"\n\n\nCode\nnames(df)\n\n\n[1] \"family\"  \"genus\"   \"species\"\n\n\nCode\ndim(df)\n\n\n[1] 3 3\n\n\nCode\nnrow(df)\n\n\n[1] 3\n\n\nCode\nncol(df)\n\n\n[1] 3\n\n\nCode\nhead(df)\n\n\n\n\n\n\nfamily\ngenus\nspecies\n\n\n\n\nPsittacidae\nAmazona\naestiva\n\n\nTrochilidae\nPhaethornis\nphilippii\n\n\nPsittacidae\nAra\nararauna\n\n\n\n\n\n\nCode\ntail(df)\n\n\n\n\n\n\nfamily\ngenus\nspecies\n\n\n\n\nPsittacidae\nAmazona\naestiva\n\n\nTrochilidae\nPhaethornis\nphilippii\n\n\nPsittacidae\nAra\nararauna\n\n\n\n\n\n\nCode\ntable(df$genus)\n\n\n\n    Amazona         Ara Phaethornis \n          1           1           1 \n\n\nCode\ntypeof(df)\n\n\n[1] \"list\"\n\n\n\n\nCode\nView(df)\n\n\n \n\nExercise\n \n\nUsing the example data iris to create a data subset with only the observations of the species ‘setosa’\nNow create a data subset containing the observations of both ‘setosa’ and ‘versicolor’\nAlso with iris create a data subset with the observations for which iris$Sepal.length is higher than 6\nHow many observations have a sepal length higher than 6?"
  },
  {
    "objectID": "r_basics.html#functions",
    "href": "r_basics.html#functions",
    "title": "R basics",
    "section": "5 Functions",
    "text": "5 Functions\nAll functions are created by the function function() and follow the same structure:\n\n* Modified from Grolemund 2014  \nR comes with many functions that you can use to do sophisticated tasks:\n\n\nCode\n# built in functions\nbi &lt;- builtins()\n\nlength(bi)\n\n\n[1] 1388\n\n\nCode\nsample(bi, 10)\n\n\n [1] \"isS4\"                           \"all.equal.language\"            \n [3] \"sys.save.image\"                 \"is.logical\"                    \n [5] \"print.DLLInfo\"                  \".Defunct\"                      \n [7] \"suppressPackageStartupMessages\" \"simpleWarning\"                 \n [9] \"subset.data.frame\"              \"range\"                         \n\n\n \nOperators are functions:\n\n\nCode\n1 + 1\n\n\n[1] 2\n\n\nCode\n'+'(1, 1)\n\n\n[1] 2\n\n\nCode\n2 * 3\n\n\n[1] 6\n\n\nCode\n'*'(2, 3)\n\n\n[1] 6\n\n\n \nMost commonly used R operators\nArithmetic operators:\n\n\n                                 Operator       Description        \nc.......addition..               \"+\"            \"addition\"         \nc.......subtraction..            \"-\"            \"subtraction\"      \nc.......multiplication..         \"*\"            \"multiplication\"   \nc.......division..               \"/\"            \"division\"         \nc....or.......exponent..         \"^ or **\"      \"exponent\"         \nc..x....y....modulus..x.mod.y... \"x %% y\"       \"modulus (x mod y)\"\nc..x.....y....integer.division.. \"x %/% y\"      \"integer division\" \n\n\n\n\nCode\n1 - 2\n\n\n[1] -1\n\n\nCode\n1 + 2\n\n\n[1] 3\n\n\nCode\n2 ^ 2\n\n\n[1] 4\n\n\n \nLogical operators:\n\n\n                                    Operator    Description               \nc.......less.than..                 \"&lt;\"         \"less than\"               \nc........less.than.or.equal.to..    \"&lt;=\"        \"less than or equal to\"   \nc.......greater.than..              \"&gt;\"         \"greater than\"            \nc........greater.than.or.equal.to.. \"&gt;=\"        \"greater than or equal to\"\nc........exactly.equal.to..         \"==\"        \"exactly equal to\"        \nc........not.equal.to..             \"!=\"        \"not equal to\"            \nc...x....Not.x..                    \"!x\"        \"Not x\"                   \nc..x...y.....tx.OR.y..              \"x | y\"     \"\\tx OR y\"                \nc..x...y....x.AND.y..               \"x & y\"     \"x AND y\"                 \nc..x..in..y....match..              \"x %in% y\"  \"match\"                   \n\n\n\n\nCode\n1 &lt; 2 \n\n\n[1] TRUE\n\n\nCode\n1 &gt; 2 \n\n\n[1] FALSE\n\n\nCode\n1 &lt;= 2 \n\n\n[1] TRUE\n\n\nCode\n1 == 2\n\n\n[1] FALSE\n\n\nCode\n1 != 2\n\n\n[1] TRUE\n\n\nCode\n1 &gt; 2 \n\n\n[1] FALSE\n\n\nCode\n5 %in% 1:6\n\n\n[1] TRUE\n\n\nCode\n5 %in% 1:4\n\n\n[1] FALSE\n\n\n \nMost functions are vectorized:\n\n\nCode\n1:6 * 1:6\n\n\n\n* Modified from Grolemund & Wickham 2017\n \n\n\n[1]  1  4  9 16 25 36\n\n\n\n\nCode\n1:6 - 1:6\n\n\n[1] 0 0 0 0 0 0\n\n\nR recycles vectors of unequal length:\n\n\nCode\n1:6 * 1:5\n\n\n\n* Modified from Grolemund & Wickham 2017\n \n\n\nWarning in 1:6 * 1:5: longitud de objeto mayor no es múltiplo de la longitud de\nuno menor\n\n\n[1]  1  4  9 16 25  6\n\n\n\n\nCode\n1:6 + 1:5\n\n\nWarning in 1:6 + 1:5: longitud de objeto mayor no es múltiplo de la longitud de\nuno menor\n\n\n[1]  2  4  6  8 10  7"
  },
  {
    "objectID": "r_basics.html#style-matters",
    "href": "r_basics.html#style-matters",
    "title": "R basics",
    "section": "6 Style matters",
    "text": "6 Style matters\nBased on google’s R Style Guide\nFile names\nFile names should end in .R and, of course, be meaningful:\n\nGOOD: predict_ad_revenue.R\nBAD: foo.R\n\nObject names\nVariables and functions:\n\nLowercase\nUse an underscore (_) (HW style)\nGenerally, nouns for variables and verbs for functions\nStrive for names that are concise and meaningful (not always easy)\nAvoid using names of existing functions of variables\n\n\n\nCode\n  - GOOD: day_one: day_1, mean.day(),\n  \n  - BAD: dayOne, day1, firstDay_of.month, mean &lt;- function(x) sum(x), c &lt;- 10\n\n\n \nSyntax\nSpacing:\n\nUse spaces around operators and for argument within a function\nAlways put a space after a comma, and never before (just like in regular English)\nPlace a space before left parenthesis, except in a function call\n\n\n\nCode\n  - GOOD: \n          a &lt;- rnorm(n = 10, sd = 10, mean = 1)\n          tab.prior &lt;- table(df[df$days.from.opt &lt; 0, \"campaign.id\"])\n          total &lt;- sum(x[, 1])\n          total &lt;- sum(x[1, ])\n          if (debug)\n          mean(1:10)\n          \n  - BAD: \n         a&lt;-rnorm(n=10,sd=10,mean=1)\n         tab.prior &lt;- table(df[df$days.from.opt&lt;0, \"campaign.id\"])  # Needs spaces around '&lt;'\n         tab.prior &lt;- table(df[df$days.from.opt &lt; 0,\"campaign.id\"])  # Needs a space after the comma\n         tab.prior&lt;- table(df[df$days.from.opt &lt; 0, \"campaign.id\"])  # Needs a space before &lt;-\n         tab.prior&lt;-table(df[df$days.from.opt &lt; 0, \"campaign.id\"])  # Needs spaces around &lt;-\n         total &lt;- sum(x[,1])  # Needs a space after the comma\n         total &lt;- sum(x[ ,1])  # Needs a space after the comma, not before  \n         if(debug) # Needs a space before parenthesis\n         mean (1:10) # ) # Extra space before parenthesis\n\n\n \nCurly braces:\n\nAn opening curly brace should never go on its own line\nClosing curly brace should always go on its own line\nYou may omit curly braces when a block consists of a single statement\n\n\n\nCode\n  - GOOD:\n              if (is.null(ylim)) {\n              ylim &lt;- c(0, 0.06)\n            }\n                      \n            if (is.null(ylim))\n              ylim &lt;- c(0, 0.06)\n          \n  - BAD:\n            \n         if (is.null(ylim)) ylim &lt;- c(0, 0.06)\n                    \n         if (is.null(ylim)) {ylim &lt;- c(0, 0.06)} \n\n         if (is.null(ylim)) {\n           ylim &lt;- c(0, 0.06)\n           } \n\n\n \nAssigments:\n\nUse &lt;-, not =\n\n\n\nCode\n  - GOOD:\n         x &lt;- 5 \n          \n  - BAD:\n         x = 5\n\n\n \nCommenting guidelines:\n\nComment your code\nEntire commented lines should begin with # and one space\nShort comments can be placed after code preceded by two spaces, #, and then one space\n\n\n\nCode\n# Create histogram of frequency of campaigns by pct budget spent.\nhist(df$pct.spent,\n     breaks = \"scott\",  # method for choosing number of buckets\n     main   = \"Histogram: fraction budget spent by campaignid\",\n     xlab   = \"Fraction of budget spent\",\n     ylab   = \"Frequency (count of campaignids)\")\n\n\n \nGeneral Layout and Ordering (google style):\n\nCopyright statement comment (?)\nAuthor comment\nFile description comment, including purpose of program, inputs, and outputs\nsource() and library() statements\nFunction definitions\nExecuted statements, if applicable (e.g., print, plot)"
  },
  {
    "objectID": "r_basics.html#r-documentation",
    "href": "r_basics.html#r-documentation",
    "title": "R basics",
    "section": "7 R documentation",
    "text": "7 R documentation\nMost R resources are extremely well documented. So the first source for help you should go to when writting R code is the R documention itself. All packages are documented in the same standard way. Getting familiar with the format can simplify things a lot.\nPackage documentation\n\n \nReference manuals\nReference manuals are collections of the documentation for all functions in a package (only 1 per package):\n\ndynaSpec manual\nbaRulho manual\n\n \nFunction documentation\nAll functions (default or from loaded packages) must have a documentation that follows a standard format:\n\n\nCode\n?mean\n\nhelp(\"mean\")\n\n\n  \nThis documentation can also be shown in Rstudio by pressing F1 when the cursor is on the function name\n \nIf you don’t recall the function name try apropos():\n\n\nCode\napropos(\"mean\")\n\n\n [1] \".colMeans\"     \".rowMeans\"     \"colMeans\"      \"kmeans\"       \n [5] \"mean\"          \"mean.Date\"     \"mean.default\"  \"mean.difftime\"\n [9] \"mean.POSIXct\"  \"mean.POSIXlt\"  \"rowMeans\"      \"weighted.mean\"\n\n\n \nVignettes\nVignettes are illustrative documents or study cases detailing the use of a package (optional, can be several per package).\nVignettes can be called directly from R:\n\n\nCode\nvgn &lt;- browseVignettes() \n\n\n\n\nCode\nvignette()\n\n\nThey should also be listed in the package CRAN page.\n \nDemonstrations\nPackages may also include extended code demonstrations (‘demos’). To list demos in a package run demo(\"package name\"):\n\n\nCode\ndemo(package=\"stats\")\n\n# call demo directly\ndemo(\"nlm\")\n\n\n \n\nExercise\n \n\nWhat does the function cut() do?\nWhat is the breaks argument in cut() used for?\nRun the first 4 lines of code in the examples supplied in the cut() documentation\nHow many vignettes does the package warbleR has?"
  },
  {
    "objectID": "r_basics.html#references",
    "href": "r_basics.html#references",
    "title": "R basics",
    "section": "References",
    "text": "References\n\nAdvanced R, H Wickham\nGoogle’s R Style Guide\n\nHands-On Programming with R (Grolemund, 2014)"
  },
  {
    "objectID": "course_prep.html",
    "href": "course_prep.html",
    "title": "Reproducible Science Workshop, REU OTS 2024",
    "section": "",
    "text": "Install or update R on the computer you will use during the course (https://cran.r-project.org). I assume that you already have it installed, but try to update it if you have a R version &lt; 4.0.0. You can find which R version you have by running this in the R console:\n\n\n\nCode\nversion$version.string\n\n\n\nUpdate all R packages if you already had R installed (⚠️ this step can take a long time to run ⚠️):\n\n\n\nCode\nupdate.packages(ask = FALSE)\n\n\n\nInstall or update the RStudio interface (https://www.rstudio.com/products/rstudio/download/, choose the free version). Optional but advised.\nMake a directory called “OTS_REU_OS_2024”, this will be your working directory for the course.\nOpen RStudio and select the tab “Tools” then “Global Options” (last option). Select the “Code” option, then select the box for “Soft-wrap R source files”.\nAlso in RStudio: Select the “Pane Layout” option and move “Source” to the top left pane and “Console” to the top right pane. For those of you unfamiliar with RStudio, the source is your script, where you save code in a physical file (usually .R script) and the console prints the output of the code you run from the source. You can write code in the console, but it will not be saved in a physical file. This layout allocates more screen space to the most useful panes. Hit “Apply” and “Ok”.\nAlso in RStudio: Go back up to the “File” tab and select “New Project”, then select the “OTS_REU_OS_2024” directory.\nNow in the R console in RStudio: Run the following code to install some R packages (remove the packages first if you have them installed already).\n\n\n\nCode\n# install package to install packages\ninstall.packages(\"sketchy\") \n\n# load sketchy\nlibrary(sketchy)\n\n# install packages\nload_packages(\n  packages = c(\n    \"rgbif\",\n    \"rmarkdown\",\n    \"knitr\",\n    \"kableExtra\",\n    \"rmdformats\",\n    \"revealjs\",\n    \"rticles\",\n    \"tufte\",\n    \"ggplot2\",\n    \"viridis\",\n    \"taxize\",\n    github = \"hadley/emo\",\n    github = \"benmarwick/rrtools\",\n    github = \"CrumpLab/vertical\",\n    github = \"crsh/papaja\"\n  )\n)\n\n\n\nInstall git (https://git-scm.com/book/en/v2/Getting-Started-Installing-Git)\nCreate a github account (https://github.com/signup)\nInstall Github Desktop (https://docs.github.com/en/desktop/installing-and-authenticating-to-github-desktop/installing-github-desktop)\nOn Github Desktop log in into your github account using github\nRegister yourself in Rpubs (https://rpubs.com/)\n\n\nA few tips to make sure you will take full advantage of the course:\n\nIdeally, read the materials ahead of time (I know! it’s time consuming)\nMake sure you have anything you need before the start of the class\nBe ready a few minutes before the start of the class\nTry to focus as much as possible in the course, close other programs or unnecessary internet browser tabs (i.e. instagram, twitter, etc). This will also make the computer more efficient (less likely to get slow)\nComment your code"
  },
  {
    "objectID": "instructor.html",
    "href": "instructor.html",
    "title": "",
    "section": "",
    "text": "Code\n\n\n\n\n\nMarcelo Araya-Salas\n\n\n\n\n\nI am just another behavioral ecologists that ended up doing a lot of coding just to get data analysis done. So now I’m deeply involved in the development of computational tools for (non-genetic) biological data analysis, mostly related to animal behavior and bioacoustics. I am the developer and maintainer of the R packages warbleR and Rraven that provide functions to streamline high-throughput acoustic analysis of animal sounds, aiming to simplify the use of R for bioacoustic research. More recently I released the R packages baRulho, to quantify acoustic signal transmission and degradation, ohun, to optimize automatic detection and PhenotypeSpace for quantifying multidimensional trait spaces. Also check out the new R package sketchy for organizing research compendiums. New functions as well as other more elaborated analyses are detailed in my blog Bioacoustics in R."
  },
  {
    "objectID": "coding_and_reproducibility.html",
    "href": "coding_and_reproducibility.html",
    "title": "\nCoding and Reproducibility\n",
    "section": "",
    "text": "Free and open-source programs allow users to inspect, modify, and enhance their design by providing access to their source code.\nOpen-source code is ideal for reproducible research because scripts can contain all the steps of the analysis (self-documentation).\nCode, in general, allows colleagues to see what we have done and rerun or even modify our analyses.\nFree tools can be used by anyone unlike commercial tools.\nOpen-source code enables a detailed understanding of analysis tools.\n\n \n\n\n\n\n\nwww.traininginbangalore.com"
  },
  {
    "objectID": "coding_and_reproducibility.html#free-software-and-code",
    "href": "coding_and_reproducibility.html#free-software-and-code",
    "title": "\nCoding and Reproducibility\n",
    "section": "1 Free Software and Code",
    "text": "1 Free Software and Code\n\nFree and open-source programs allow users to inspect, modify, and enhance their design by providing access to their source code.\nOpen-source code is ideal for reproducible research because scripts can contain all the steps of the analysis (self-documentation).\nCode, in general, allows colleagues to see what we have done and rerun or even modify our analyses.\nFree tools can be used by anyone unlike commercial tools.\nOpen-source code enables a detailed understanding of analysis tools.\n\n \n\n1.1 Why R?\n\n\n\nwww.traininginbangalore.com"
  },
  {
    "objectID": "coding_and_reproducibility.html#tools-for-reproducible-programming",
    "href": "coding_and_reproducibility.html#tools-for-reproducible-programming",
    "title": "\nCoding and Reproducibility\n",
    "section": "2 Tools for Reproducible Programming",
    "text": "2 Tools for Reproducible Programming\n \n\n2.1 Literate Programming\n\nInvolves documenting in detail what the problem consists of, how it is solved, how and why a certain flow of analysis was adopted, how it was optimized (if it was optimized), and how it was implemented in the programming language.\nDynamic reports in R facilitate the use of literate programming to document data handling and statistical analysis (this file you are reading right now is a dynamic report created in R).\nThe main way R facilitates reproducible research is by using a document that is a combination of content and data analysis code.\nWe will discuss dynamic reports later as a tool to facilitate literate programming.\n\n\n\n2.2 Reproducible Environments\n\nReproducibility is also about ensuring that someone else can reuse your code to get the same results.\nFor this, you need to provide more than just the code and the data.\nDocumenting and managing your project’s dependencies correctly can be complicated. However, even simple documentation that helps others understand the setup you used can have a significant impact.\nIdeally, you should document the exact versions of all packages and software you used and the operating system.\n\n\n\n2.3 Session Information\nThe simplest way to document the environment (R + packages and their versions) in which an analysis was done is by using the sessionInfo function:\n\n\nR version 4.1.2 (2021-11-01)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 22.04.4 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.10.0\nLAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.10.0\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=es_CR.UTF-8        LC_COLLATE=en_US.UTF-8    \n [5] LC_MONETARY=es_CR.UTF-8    LC_MESSAGES=en_US.UTF-8   \n [7] LC_PAPER=es_CR.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=es_CR.UTF-8 LC_IDENTIFICATION=C       \n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] lubridate_1.9.3   emo_0.0.0.9000    digest_0.6.35     crayon_1.5.2     \n [5] assertthat_0.2.1  lifecycle_1.0.4   jsonlite_1.8.8    magrittr_2.0.3   \n [9] evaluate_0.23     stringi_1.8.3     rlang_1.1.3       cli_3.6.2        \n[13] rstudioapi_0.15.0 vctrs_0.6.5       generics_0.1.3    rmarkdown_2.26   \n[17] tools_4.1.2       stringr_1.5.1     glue_1.7.0        htmlwidgets_1.6.4\n[21] purrr_1.0.2       xfun_0.43         yaml_2.3.8        fastmap_1.1.1    \n[25] compiler_4.1.2    timechange_0.3.0  htmltools_0.5.8.1 knitr_1.46       \n\n\n \nHowever, this documentation does not necessarily make the analyses replicable since package versions often get updated and even some packages may not be available after a while.\n \n\n\n2.4 Packrat: Reproducible Package Management in R\nR packages (and their specific versions) used in an analysis can be difficult to replicate:\n\nHave you ever had to use trial and error to figure out which R packages you need to install to make someone else’s code work?\nHave you ever updated a package to make your project’s code work, only to find out that the updated package causes another project’s code to stop working?\n\nWith the packrat package, projects have several useful features in terms of reproducibility:\n\nIsolation: Installing a new or updated package for a project will not affect your other projects and vice versa. That’s because packrat gives each project its own private package library.\nPortable: Easily move your projects from one computer to another, even on different platforms. packrat makes it easy to install the packages your project depends on.\nReproducible: packrat records the exact versions of the package it depends on and ensures that those exact versions are installed wherever you go.\n\n\n2.4.1 Using Packrat\n\nOf course, first, we need to install the packrat package in R:\n\n\n\nCode\n# install package\ninstall.packages(\"packrat\")\n\n\n \n\nNow, let’s create a new R project (in a new directory).\nAfter creating a project (or moving to an existing one) we can start monitoring and managing packages with packrat like this:\n\n\n\nCode\n# start packrat in project\npackrat::init(path = \"/project/directory\")\n\n\n \nIf the working directory is set as the project directory, it is not necessary to define the ‘path’:\n\n\nCode\n# start packrat in project\npackrat::init()\n\n\n \nAfter this, the use of packages in this project will be managed by packrat (you will see some differences in what the R console prints when installing packages). So, we are already using packrat. A packrat project contains some additional files and directories. The init() function creates these files and directories if they do not already exist:\n\npackrat/packrat.lock: lists the precise versions of the package that were used to satisfy the dependencies, including dependencies of dependencies (should never be edited manually!).\npackrat/packrat.opts: Project-specific packrat options. These can be consulted and configured with get_opts and set_opts; see “packrat-options” for more information.\npackrat/lib/: Private package library for this project.\npackrat/src/: Source packages of all dependencies that have been reported to packrat.\n.Rprofile: Tells R to use the private package library when started from the project directory.\n\nThe only difference with other projects is that projects using packrat have their own package library. This is located in /project/directory/packrat/lib. For example, let’s install a couple of new packages, they can be some you are familiar with or these ones we have here as an example:\n\n\nCode\ninstall.packages(\"fun\")\n\n\n \nEvery time we install one or more packages, it is necessary to update the tracking status of packrat. We do this as follows:\n\n\nCode\n# check current status\npackrat::status()\n\n# update packrat in project\npackrat::snapshot()\n\n\n \nWith this package, we can play in R:\n\n\nCode\n# example of an irrelevant game X\nlibrary(fun)\n\nif (.Platform$OS.type == \"windows\") x11() else x11(type = \"Xlib\")\n\nmine_sweeper()\n\n\n \nOr take an Alzheimer’s test:\n\n\nCode\n# another slightly less irrelevant game\nx = alzheimer_test()\n\n\n \nIf we remove a package that we used in the project, we can reinstall it using restore():\n\n\nCode\n# remove\nremove.packages(\"fun\")\n\n# check current status\npackrat::status()\n\n# restore\npackrat::restore()\n\n\nNew packages can be installed:\n\n\nCode\n# install\ninstall.packages(\"cowsay\")\n\n# load\nlibrary(cowsay)\n\n# diagram\nsay(\"Hello world!\")\n\n# random echo\nsay(\"rms\")\n\n\n\n\n\n -------------- \nHello world! \n --------------\n    \\\n      \\\n        \\\n            |\\___/|\n          ==) ^Y^ (==\n            \\  ^  /\n             )=*=(\n            /     \\\n            |     |\n           /| | | |\\\n           \\| | |_|/\\\n      jgs  //_// ___/\n               \\_)\n  \n\n\n\n\nCode\n# random echo\nsay(\"rms\")\n\n\n \n\n\n\n -------------- \nSome people say M-x psychoanalyse-pinhead is a merely a program. Others say M-x psychoanalyse-pinhead *is* Richard Stallman. All I know is, Richard Stallman is The Stig. \n --------------\n    \\\n      \\\n        \\\n            |\\___/|\n          ==) ^Y^ (==\n            \\  ^  /\n             )=*=(\n            /     \\\n            |     |\n           /| | | |\\\n           \\| | |_|/\\\n      jgs  //_// ___/\n               \\_)\n  \n\n\n \n…and they should be “referenced” in the same way:\n\n\nCode\n# check current status\npackrat::status()\n\n# update packrat in project\npackrat::snapshot()\n\n\n \nIn this GitHub repository, there is an R project with packrat. We can clone it just to see how it works without needing to install the packages:\n\n\nCode\ngit clone https://github.com/maRce10/ejemplo_packrat_repo.git\n\n\n\nSession Information\n\n\nR version 4.1.2 (2021-11-01)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 22.04.4 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.10.0\nLAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.10.0\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=es_CR.UTF-8        LC_COLLATE=en_US.UTF-8    \n [5] LC_MONETARY=es_CR.UTF-8    LC_MESSAGES=en_US.UTF-8   \n [7] LC_PAPER=es_CR.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=es_CR.UTF-8 LC_IDENTIFICATION=C       \n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] cowsay_0.9.0\n\nloaded via a namespace (and not attached):\n [1] rstudioapi_0.15.0 knitr_1.46        magrittr_2.0.3    timechange_0.3.0 \n [5] rlang_1.1.3       fastmap_1.1.1     stringr_1.5.1     tools_4.1.2      \n [9] xfun_0.43         cli_3.6.2         htmltools_0.5.8.1 fortunes_1.5-4   \n[13] yaml_2.3.8        assertthat_0.2.1  digest_0.6.35     lifecycle_1.0.4  \n[17] crayon_1.5.2      purrr_1.0.2       formatR_1.14      htmlwidgets_1.6.4\n[21] vctrs_0.6.5       rmsfact_0.0.3     glue_1.7.0        evaluate_0.23    \n[25] rmarkdown_2.26    emo_0.0.0.9000    stringi_1.8.3     compiler_4.1.2   \n[29] generics_0.1.3    jsonlite_1.8.8    lubridate_1.9.3"
  },
  {
    "objectID": "research_compendiums.html",
    "href": "research_compendiums.html",
    "title": "\nResearch compendiums (in R)\n",
    "section": "",
    "text": "As data scientific analyses increase in complexity, so do the challenges of ensuring reproducibility in these analyses. Several proposals have emerged to try to solve reproducibility issues in computational data analysis.\nUnfortunately, this is further complicated by the lack of formal instruction in data handling and structuring for analysis that scientists (we) suffer from. This makes it almost inevitable that there is little consistency and even chaos in our data organization for research projects. This is an example of a “poorly structured” project (to use a euphemism):\nThis (lack of) “structure” is impractical. Unfortunately, it is likely not an isolated case.\nIn this tutorial, we will discuss some of the tools that have been developed to address these problems that have been developed in R."
  },
  {
    "objectID": "research_compendiums.html#folder-structure-formats",
    "href": "research_compendiums.html#folder-structure-formats",
    "title": "\nResearch compendiums (in R)\n",
    "section": "1 Folder structure formats",
    "text": "1 Folder structure formats\nHere you will find a short and by no means exhaustive list of examples of folder structures for data analysis projects.\n \n\n1.1 “Noble” format\nNoble (2009) proposes a specific data structure for bioinformatics data (although it could be adapted to other needs):\n\n\n\n\n\n\n\n\n\n \nThis structure, however, uses folders with dates to keep the chronological order of the analysis, something that should be documented with a version control system (i.e., Git). Therefore, it is not very functional.\n \n\n\n1.2 “R-dir” format\nIn this blog the following format is proposed:\n\n\nCode\n  analysis_r-dir/\n    |\n    ├── code/\n    │   ├── processed       \n    │   └── raw  \n    ├── data/\n    │   ├── raw/\n    │   └── clean/\n    ├── figures/            \n    │   ├── exploratory       \n    │   └── final  \n    └── text/\n        ├── final\n        └── notes\n\n\n \nThe main folders include:\n\ncode: contains all R scripts (or other languages); raw ones go in “./code/raw” and processed ones in “./processed/clean”\ndata: any type of data, raw ones go in “./data/raw” and processed ones in “./data/clean”\nfigures: exploratory figures go in “./figures/exploratory” and final ones in “./figures/final”\n\nThis format can be copied (or cloned) from its GitHub repository.\nThe proposed structure is similar to others found on the web. Variations depend somewhat on the type of data and the format of the obtained results (i.e., images vs. phylogenetic trees).\n \n\n\n1.3 “Moldach” format\nThis format is very similar to the previous one, and it is mainly included to highlight the common factors among the different proposed formats:\n\n\nCode\nproject_name\n|--data\n    |--raw\n        |--file_001.xlsx\n        |--file_002.gen\n        |--file_002.sample\n    |--tidy\n        |--file_001-cleaned.csv\n|--refs\n    |--Oldach_2018.pdf\n|--analysis\n    |--01-analysis.Rmd\n|--figures\n    |--01-scatterplot.jpg\n    |--01-correlation.png\n|--R\n    |--exploratory_analysis.R\n    |--pdf_scraper.R\n|--name_of_project.Rproj\n|--run_all.R\n\n\n \nThe main differences with the “r-dir” format are the use of a references folder and the code to compile the compendium in the root directory.\nThe format is described in detail in this blog and can be cloned from its GitHub repository."
  },
  {
    "objectID": "research_compendiums.html#r-packages-as-templates-for-compendiums",
    "href": "research_compendiums.html#r-packages-as-templates-for-compendiums",
    "title": "\nResearch compendiums (in R)\n",
    "section": "2 R packages as templates for compendiums",
    "text": "2 R packages as templates for compendiums\n\nSome of these tools available in R packages use the folder structure and continuous integration of these packages (Marwick et al. 2018; Vourre & Crump 2020). One of these is the vertical package (Vourre & Crump 2020). Its authors propose several advantages of using this format to share research products (from experiment scripts to articles, presentations, and posters):\n\n\nR packages have a standardized and well-organized file structure that is useful for organizational purposes\nResearchers often develop custom functions for analysis, and putting them in an R package makes it easier to share the functions\nR packages can include project data and provide a natural way to document the data using the same schemas for documenting R functions\nR packages include various documents through the vignettes folder, which could in principle include various formats for communicating research, such as a manuscript or a set of slides written in R Markdown\nR packages can be automatically converted into websites via pkgdown, providing an attractive format for sharing research-related materials\n\n\nSin embargo el uso de este formato puede generar mas problemas de los que ayuda a resolver. Aquí enumero algunas de las incongruencias:\nHowever, using this format can generate more problems than it helps to solve. Here I list some of the inconsistencies:\n\n\nFunctions should be used once or in a single point in the analysis flow, so why compile and document them in such detail?\nDocumenting packages and the functions within them is complex\nDESCRIPTION duplicates effort and information from README and demands greater knowledge of package-specific format and conventions\nMaking data available when loading the environment does not provide advantages and makes the data less accessible outside of R (i.e., there is no gain from using data(\"database\") instead of read.csv(\"database.csv\"))\nPackages are for sharing tools that are used repeatedly. Data analysis reproduction occurs once or a few times\nR packages have folders that have no functionality in data analysis (“man”, “vignettes”, “inst”)\nIntegrating the components of a package (necessary to be able to use continuous integration) requires other files with complex structures and conventions that imply an unnecessarily steep learning curve\n\nFor a more detailed discussion of the problems associated with using packages as templates, we recommend reading this post (McBrain 2020)."
  },
  {
    "objectID": "research_compendiums.html#r-packages-for-compendium-generation",
    "href": "research_compendiums.html#r-packages-for-compendium-generation",
    "title": "\nResearch compendiums (in R)\n",
    "section": "3 R Packages for Compendium Generation",
    "text": "3 R Packages for Compendium Generation\n\n3.1 vertical\nThe vertical package provides a structured workflow based on the folder structure and continuous integration of R packages for creating and sharing research materials and resources as an R package (Matthew et al. 2020). The package can be installed and/or loaded from GitHub like this (it is not yet on CRAN(?)):\n\n\nCode\n# install.packages('devtools')\n\nremotes::install_github(\"CrumpLab/vertical\")\n\nlibrary(vertical)\n\n\n \nYou will also need other packages if you want to make use of functionalities like writing articles and generating presentations:\n\n\nCode\n# install papaja\ndevtools::install_github(\"crsh/papaja\")\n\ninstall.packages(\"tinytex\")\ntinytex::tlmgr_update()\n\n# if unable to generate articles try this as a last resort\n# update.packages(ask = FALSE, checkBuilt = TRUE)\n\n\n \n\n3.1.1 ‘vertical’ workflow\nInstalling the vertical package adds a new project template to RStudio (RStudio must be restarted after installing vertical for it to recognize the template). Users can start a new “vertical” project from RStudio by choosing the option when creating a new project. By default, a “vertical” project is structured as follows:\n\n\n\n\n\n\n\n\n\n \nThe new project contains a more complex skeleton than that of an R package:\n\nFolders for raw data, data, and vignettes\nA _pkgdown.yml file to control the parameters of the website when processed with pkgdown\nAdditional folders for project research products like “experiments”, “manuscript”, “model”, “posters”, and “slides”.\n\nBy default, vertical includes R Markdown templates from other packages within each folder to create each type of content. As a result, vertical suggests using R as a single-source solution for creating research products.\n\n\n3.1.2 Creating a ‘vertical’ project\nAfter installing vertical, restart RStudio, then follow these steps to start a new vertical project. When choosing a name, it must be a valid R package name. For example, the name must contain letters, numbers, or periods (e.g., my.name), but not periods at the end. This means no spaces, hyphens, or underscores.\n\n\n\n\n\n\n\n\n\n \nYou can also create a ‘vertical’ project from the console, see the documentation of vertical_project() for more options. This brings up the R project templates window from the console:\n\n\nCode\nvertical::vertical_project()\n\n\n \nThis is the folder structure it generates:\n\n\nCode\n  vertical_comp/\n    |\n    ├── data_raw/\n    ├── manuscripts/\n    │   ├── manuscript.Rmd       \n    │   └── r-references.bib  \n    ├── posters/            \n    ├── R/            \n    ├── slides/            \n    └── vignettes/            \n\n\n \n\n\n\nExercise 1\n1.1 Create a compendium using vertical\n\n1.2 Modify the R markdown file in ‘./manuscripts/’ and generate the HTML again\n\n\n \n\n\n\n3.2 rrtools\nThe goal of rrtools is “to provide instructions, templates, and functions for creating a basic compendium suitable for writing reproducible articles or reports in R” (Marwick 2019). This package documents key steps and provides useful functions to quickly create a new research compendium.\nrrtools provides a template for academic writing using R Markdown and bookdown. It also allows for the isolation of your computational environment using Docker, version control of packages using `MR\nAN, and continuous integration usingTravis`:\n\n\nCode\ndevtools::install_github(\"benmarwick/rrtools\")\n\nlibrary(rrtools)\n\n\n \nWe can start a compendium with rrtools like this (do not run it if you are within an Rstudio project):\n\n\nCode\nrrtools::use_compendium(\"package_name\")\n\n\n \nYou need to update the DESCRIPTION file (located in the compendium directory) to include accurate metadata. For example, the ‘imports’ section should have the names of the packages used in the code in our compendium (‘Imports: warbleR, baRulho, NatureSounds’).\nWe can add a license to the compendium like this:\n\n\nCode\nrrtools::create_compendium(\"package_name\")\n\n\n \nThis adds the license to DESCRIPTION and generates a LICENSE file with license details. It defaults to using the MIT license although other licenses can be defined.\nUnlike vertical, rrtools does not generate all the basic folders necessary for a compendium. We can create these folders like this:\n\n\nCode\nrrtools::use_analysis()\n\n\n \nThis generates the “./analysis” folder with the following structure:\n\n\nCode\n  analysis/\n    |\n    ├── paper/\n    │   ├── paper.Rmd       # document to generate the article\n    │   └── references.bib  # references in bibtex format\n    ├── figures/            # figures produced by rmarkdown\n    |\n    ├── data/\n    │   ├── raw_data/       # raw (original) data\n    │   └── derived_data/   # processed data\n    |\n    └── templates\n        ├── journal-of-archaeological-science.csl # citation style\n        |                   \n        ├── template.docx   # generated article template\n        └── template.Rmd    # article rmd template\n\n\n \nThe README.Rmd file can be created like this:\n\n\nCode\nrrtools::use_readme_rmd()\n\n\n \nThe generated README includes a template that shows how to cite your project (it should be edited to include the correct title and DOI). It also contains license, figures, code, and data information for your compendium.\nThis function also adds two other Rmd files: a code of conduct for users (CONDUCT.md) and one with basic instructions for people who want to contribute to your project (CONTRIBUTING.md).\nIt also offers functions like rrtools::use_dockerfile() and rrtools::use_travis() to facilitate continuous integration. Visit the package’s github repository for more detail.\n \n\n\n3.3 workflowr\nThe workflowr package aims to help researchers “organize their analyses in a way that promotes effective project management, reproducibility, collaboration, and sharing of results” (Blischak et al. 2019). workflowr combines literate programming (knitr and rmarkdown) and version control (Git, via git2r) to generate a website containing documented and versioned results.\nUnlike rrtools and vertical, workflowr does not emulate the folder structure of R packages, which simplifies its use and makes its structure more intuitive from the researcher’s point of view.\nThese are some of the features of the package detailed on its github site:\n\nOrganized\n\nProvides a project template with organized subdirectories\nMixes code and results with R Markdown\nUses Git to version both source code and results\n\nReproducible\n\nDisplays the version of the code used to create each result\nRuns each analysis in an isolated R session\nRecords the session information for each analysis\nSets the same seed for generating random numbers for each analysis\n\nShareable\n\nCreates a website to present the results of your research\nDocuments how to host your website for free via GitHub Pages or GitLab Pages\nCreates links to previous versions of results\n\n\n \nYou can install the package like this:\n\n\nCode\ninstall.packages(\"workflowr\")\n\nlibrary(workflowr)\n\n\n \nTo create a project with workflowr, first you must set up git with the wflow_git_config() function and then start it with wflow_start():\n\n\nCode\n# Set up Git\nwflow_git_config(user.name = \"full name\", user.email = \"email@domain\")\n\n# Start a project\nwflow_start(\"my_compendium\")\n\n\n \nThis is the folder structure of the ‘workflowr’ compendium:\n\n\nCode\nmy_compendium/\n├── .gitignore\n├── .Rprofile\n├── _workflowr.yml\n├── analysis/\n│   ├── about.Rmd\n│   ├── index.Rmd\n│   ├── license.Rmd\n│   └── _site.yml\n├── code/\n│   ├── README.md\n├── data/\n│   └── README.md\n├── docs/\n├── myproject.Rproj\n├── output/\n│   └── README.md\n└── README.md\n\n\n \nAnd with this code we can compile the compendium site:\n\n\nCode\nwflow_build()\n\n\nThis command ‘knits’ all R Markdown files in the ‘./analysis’ folder and saves the corresponding HTML files in ‘./docs’. Each file is created in its own external R session to avoid potential conflicts between analyses (this is the default behavior of Rmd files). It also opens the local copy of the compendium site in the internet browser. We can also take a look at the local copy of the site like this:\n\n\nCode\n# view compendium site\nwflow_view()\n\n\n \nworkflowr distinguishes between R Markdown files that are published and those that are not published. A published file is included on the online website; while the HTML file of an unpublished R Markdown file can only be viewed on the local computer. Since the project was just initiated, there are no published files. To see the project status of workflowr, we should use wflow_status():\n\n\nCode\n# check current status\nwflow_status()\n\n\n \nIf we want to make the HTMLs public, we should use the wflow_publish() function and provide the names of the R markdowns that generate them with the files argument. Additionally, we need to add a message for the ‘commit’ accompanying the changes generated when synchronized with the remote copy:\n\n\nCode\n# publish rmds\nwflow_publish(files = c(\"analysis/index.Rmd\", \"analysis/about.Rmd\",\n    \"analysis/license.Rmd\"), message = \"my first commit of the compendium\")\n\n\n \nAt this point, we have created a versioned website locally\n. The next step is to put it in an online repository (i.e., GitHub or GitLab). To upload and/or synchronize the compendium (including the website) to GitHub, we use the wflow_use_github() function. The only argument it requires is the username:\n\n\nCode\nwflow_use_github(\"my_compendium\")\n\n\n \nThe “getting started” tutorial of workflowr provides more details for each of the steps to generate compendia with this package. The documentation is quite comprehensive, including several other tutorials for customizing the compendia and their websites. Here you can find the list of tutorials.\n\n\nExercise 2\n\n2.1 Create a compendium using workflowr\n\n2.2 Build the compendium site\n\n\n \n\n\n3.4 sketchy\nThis is a package we are currently developing. At the moment, it only allows creating folder structures and generating an Rmarkdown to write the article. It also allows visualizing the compendium structure in the console. The main difference from the other packages is that it does not adhere to a single structure; it provides several alternative structures and also allows the user to generate their own formats.\nTo use it, you must first install it from github like this:\n\n\nCode\n# From github\ndevtools::install_github(\"maRce10/sketchy\")\n\n# load package\nlibrary(sketchy)\n\n\nThe package comes with 13 folder structures. You can use them with the compendium_skeleton() function. The function creates the folders/subfolders and prints a diagram of the compendium in the console:\n\n\n3.5 Basic Compendium\n\n\nCode\npath = tempdir()\n\nmake_compendium(name = \"project_x\", path = path, format = compendiums$basic$skeleton)\n\n\n\n\n\n\n\n\n\n\n\n \n(in the example, a temporary directory is used but this should be changed to the directory where you want to create the compendium)\n\n\n3.6 Alternative Formats\nYou can use formats from other sources. In this case, we use the one from Wilson et al. (2017):\n\n\nCode\nmake_compendium(name = \"project_y\", path = path, format = compendiums$wilson$skeleton)\n\n\n\n\n\n\n\n\n\n\n\n \nYou can also add comments to each folder to explain its contents:\n\n\nCode\nmake_compendium(name = \"project_z\", path = path, format = compendiums$large_compendium$skeleton,\n    comments = compendiums$large_compendium$comments)\n\n\n\n\n\n\n\n\n\n\n\n \nWhen you create a compendium that includes a folder called “manuscript,” the package automatically adds the “manuscript_template.Rmd” file that can be used to write the project’s article.\nThe idea is to include functions to identify large files that cannot be uploaded to github and be able to upload them to other repositories (i.e., figshare or zenodo).\n\n\nExercise 3\n\n3.1 Create a compendium with a custom structure using sketchy\n\n3.2 Add comments to each folder"
  },
  {
    "objectID": "research_compendiums.html#references",
    "href": "research_compendiums.html#references",
    "title": "\nResearch compendiums (in R)\n",
    "section": "4 References",
    "text": "4 References\n\nAraya-Salas, M., Willink, B., Arriaga, A. (2020), sketchy: research compendiums for data analysis in R. R package version 1.0.0.\nAust, F. & Barth, M. (2020). papaja: Prepare reproducible APA journal articles with R Markdown. R package version 0.1.0.9997. https://github.com/crsh/papaja\nBlischak JD, Carbonetto P and Stephens M. Creating and sharing reproducible research code the workflowr way [version 1; peer review: 3 approved]. F1000Research 2019, 8:1749. (https://doi.org/10.12688/f1000research.20843.1)\nMcBain (2020). Before I Sleep: Project as an R package: An okay idea. https://milesmcbain.com/posts/an-okay-idea/\nBen Marwick (2019). rrtools: Creates a Reproducible Research Compendium. R package version 0.1.0. https://github.com/benmarwick/rrtools\nNoble WS (2009) A Quick Guide to Organizing Computational Biology Projects. PLoS Comput Biol 5(7): e1000424. https://doi.org/10.1371/journal.pcbi.1000424\nMarwick, B., Boettiger, C., & Mullen, L. (2018). Packaging Data Analytical Work Reproducibly Using R (and Friends). American Statistician, 72(1), 80–88.\nMatthew J. C. Crump and Matti Vuorre (2020). vertical: Reproducible worfklow for psychological science research asset creation and communication. R package version 0.1.0.0000. https://github.com/CrumpLab/vertical\nVuorre, M., & Crump, M. J. C. (2020). Sharing and organizing research products as R packages. Behavior Research Methods, 1–11.\nWilson G, Bryan J, Cranston K, Kitzes J, Nederbragt L, et al. (2017) Good enough practices in scientific computing. PLOS Computational Biology 13(6): e1005510.\n\n\nSession information\n\n\nR version 4.3.2 (2023-10-31)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 22.04.2 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.10.0 \nLAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.10.0\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    \n [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   \n [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       \n\ntime zone: America/Costa_Rica\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] xaringanExtra_0.7.0 emo_0.0.0.9000      sketchy_1.0.3      \n[4] papaja_0.1.2        tinylabels_0.2.4    rrtools_0.1.6      \n[7] vertical_0.1.0.0000 workflowr_1.7.1     knitr_1.46         \n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.2.0   dplyr_1.1.4        fastmap_1.1.1      TH.data_1.1-2     \n [5] bayestestR_0.13.1  promises_1.2.1     digest_0.6.35      timechange_0.2.0  \n [9] estimability_1.4.1 mime_0.12          lifecycle_1.0.4    ellipsis_0.3.2    \n[13] survival_3.2-13    processx_3.8.4     magrittr_2.0.3     compiler_4.3.2    \n[17] rlang_1.1.3        tools_4.3.2        utf8_1.2.4         yaml_2.3.8        \n[21] htmlwidgets_1.6.4  pkgbuild_1.4.4     here_1.0.1         pkgload_1.3.4     \n[25] multcomp_1.4-25    miniUI_0.1.1.1     purrr_1.0.2        grid_4.3.2        \n[29] datawizard_0.9.1   fansi_1.0.6        urlchecker_1.0.1   git2r_0.33.0      \n[33] profvis_0.3.8      xtable_1.8-4       colorspace_2.1-0   ggplot2_3.5.0     \n[37] emmeans_1.9.0      scales_1.3.0       MASS_7.3-55        insight_0.19.7    \n[41] cli_3.6.2          mvtnorm_1.2-4      rmarkdown_2.26     crayon_1.5.2      \n[45] generics_0.1.3     remotes_2.5.0      rstudioapi_0.15.0  httr_1.4.7        \n[49] parameters_0.21.3  sessioninfo_1.2.2  cachem_1.0.8       stringr_1.5.1     \n[53] splines_4.3.2      assertthat_0.2.1   effectsize_0.8.6   formatR_1.14      \n[57] vctrs_0.6.5        devtools_2.4.5     Matrix_1.6-5       sandwich_3.1-0    \n[61] jsonlite_1.8.8     callr_3.7.6        packrat_0.9.2      glue_1.7.0        \n[65] codetools_0.2-18   ps_1.7.6           lubridate_1.9.3    stringi_1.8.3     \n[69] gtable_0.3.4       later_1.3.2        munsell_0.5.0      tibble_3.2.1      \n[73] pillar_1.9.0       clisymbols_1.2.0   htmltools_0.5.8.1  R6_2.5.1          \n[77] rprojroot_2.0.4    evaluate_0.23      shiny_1.8.0        lattice_0.20-45   \n[81] memoise_2.0.1      httpuv_1.6.13      Rcpp_1.0.12        coda_0.19-4       \n[85] whisker_0.4.1      xfun_0.43          fs_1.6.3           zoo_1.8-12        \n[89] usethis_2.2.2      getPass_0.2-4      pkgconfig_2.0.3"
  },
  {
    "objectID": "intro_to_git_and_github.html#git-and-github",
    "href": "intro_to_git_and_github.html#git-and-github",
    "title": "\nIntroduction to Git and GitHub\n",
    "section": "0.1 Git and GitHub",
    "text": "0.1 Git and GitHub\nGit and GitHub are different but complementary tools for the development of programming projects or related work. Git is a computational version control tool that is used practically worldwide. GitHub can be described as the most popular online platform for hosting programming projects (i.e., code). However, this definition is simplistic: GitHub offers many other tools to facilitate collaboration and publication of programming-related projects.\n\nGit → version control\nGithub → online repository"
  },
  {
    "objectID": "intro_to_git_and_github.html#git-version-control",
    "href": "intro_to_git_and_github.html#git-version-control",
    "title": "\nIntroduction to Git and GitHub\n",
    "section": "0.2 Git: Version Control",
    "text": "0.2 Git: Version Control\nA version control system tracks the history of changes as people and teams collaborate on projects together. As the project evolves, teams can run tests, fix bugs, and contribute new code with the confidence that any version can be retrieved at any time.\n\n\n\n\nTaken from Bryan 2018\n\nVersion control:\n\nKeeps track of changes made\nFacilitates collaborative work\nAllows knowing who changed what and when\nAllows reverting changes\n\nGit does not need a permanent connection to a central repository and allows asynchronous work of collaborators.\n \n\n0.2.1 Installing Git\n\n\n0.2.1.1 Install Git on Linux\nGit was originally developed on the Linux operating system. Therefore, it makes sense that it’s easier to set up to run on Linux. You can install Git on Linux via the package management tool that comes with your distribution:\n\nGit packages are available using apt\nIt’s a good idea to ensure you’re running the latest version. To do this, navigate to the command prompt terminal and run the following command to ensure everything is up to date: sudo apt update\nTo install Git, run the following command: sudo apt install git-all\nOnce the command output is complete, you can check the installation by typing: git version\n\n\n\n\n0.2.1.2 Install Git on Windows\n\nFind the latest installer for Git for Windows and download the latest version\nOnce the installer has started, follow the instructions provided on the Git Setup Wizard screen until installation is complete\nOpen the Windows terminal or Git Bash\nType the git version to verify that Git is installed (git version)\n\n\nNote: git-scm is recommended to download Git for Windows. The advantage of downloading Git from git-scm is that it uses the latest version of Git and includes Git Bash.\n\n\n\n\n0.2.1.3 Install Git on macOS\nMost versions of macOS have Git installed. However, if you don’t have Git installed, you can install the latest version of Git using one of these methods:\n\n0.2.1.3.1 Install Git from an installer\n\nRun git --version in the terminal, if it’s not installed yet you will be prompted to install it\nOnce the installer has started, follow the instructions provided until installation is complete\n\n\n\n0.2.1.3.2 Install Git from Homebrew\nHomebrew is a package manager for macOS. If you already have Homebrew installed, you can follow these steps to install Git:\n\nOpen a terminal window and install Git using the following command: brew install git\nOnce the command output is complete, you can verify the installation by typing: git --version\n\n\n \n\n\n\n\n0.2.2 Using Git for Version Control\nGit is typically used from a terminal (console where code is run). In Windows, it is recommended to use the gitbash console. In Unix-based operating systems (macOS and Linux), it can be used directly from the default terminal.\n \n\n0.2.2.1 Steps\n\nSet up your Git identity\n\nGit uses a name and an email address to identify commits with an author (i.e., track which person is making which changes). Your Git identity is not the same as your GitHub account (we’ll talk about GitHub shortly), although both should use the same email address. Typically, you only need to set up your Git identity once per computer.\nYou can set your Git username like this:\n\n\nCode\n# define username in git\ngit config --global user.name \"Your name\"\n\n\n… and you can set the email like this:\n\n\nCode\n# define email in git\ngit config --global user.email \"your@email.com\"\n\n\n \n\nCreate a local repository\n\nNavigate to the folder where you want to keep the repository (cd) and initialize the local repository (git init):\n\n\nCode\n# example folder\ncd /path/to/my/repository\n\n# initialize local repository\ngit init\n\n\ngit init initializes a new Git repository and begins tracking\nan existing directory. It adds a hidden subfolder within the existing directory that houses the internal data structure needed for version control .\n \n\nAdd a new file\n\nCreate a new file. It can be an .R file or a README.md file describing the new repository (in this case, it’s just an example). Now we can use git status to check the current status of the project:\n\n\nCode\n# check status\ngit status\n\n\n\nNote: Git can track specific changes within a file when they are text files (non-binary files). For binary files, only the version history will be tracked.\n\n \n\nCommit changes in Git\n\nTo start tracking a new file, you must use the following command:\n\n\nCode\n# start tracking a file\ngit add filename\n\n\n \nYou can also do it for all new files like this:\n\n\nCode\n# start tracking all new files\ngit add .\n\n\n \nOnce you’ve started tracking file(s), you can commit the changes to the project’s version history:\n\n\nCode\n# commit changes\ngit commit -m \"short but explanatory message here\"\n\n\n \n\nA common workflow is to edit files in your project, add the files you want to save using the git add command, and then commit the changes to the file using the git commit command. We can also use git status to check the project’s status.\n\n\nAdd branches\n\n\nA clean way to make changes is to keep them on a parallel development line known as a “branch”\nIt’s also the safest way to work on different versions of a repository simultaneously\nBy default, the repository has a main branch considered the main version\nWe use branches to experiment and make edits before pushing them to the main branch\nBranches can maintain independent versions of the project that can later be (or not) merged into the main branch\n\n\n\n\n \nThe following code creates a new branch and activates it:\n\n\nCode\n# add a branch\ngit checkout -b new_branch\n\n\n \nNow we can make changes to the project without affecting the main branch. Once satisfied with the changes, they can be reintegrated into the main branch:\n\n\nCode\n# go back to the main branch\n git checkout master\n\n# merge new branch\ngit merge new_branch\n\n\n \n… and delete the alternate branch:\n\n\nCode\n# delete branch\ngit branch -d new_branch\n\n\n \n\nAdditional Commands to Monitor Project Status in Git\n \n\ngit log: returns a history of commits\ngit reflog: allows visualizing recent changes such as additions, commits, and branch changes\ngit diff: allows visualizing specific changes in non-binary files (i.e., text files)\ngit reset: resets the main branch to a previous state\nUse git --help to see a list of other useful commands for tracking/modifying histories\n\n\n \n\n\n\n\n0.2.3 Using GitHub to Host Projects\nGitHub is a platform for storing code, version control, and facilitating collaborations. It allows users to sort and save copies of code, as well as collaborate on projects related to programming remotely.\n\n0.2.3.1 Steps\n\nCreate an account on GitHub\n\n\nGo to (this address)[https://github.com/join] and click the “Create an account” button\n\n\nCreate a repository\n\n\nIn the top right corner, next to your identification icon, click “+” and then select “New repository”\nName the repository and write a brief description\nSelect “Initialize this repository with a README file” (optional but recommended)\n\n\n\n\n \n\nCreate a branch\n\n\nBranches on GitHub are equivalent to those we create in Git and have the same function: running parallel versions of a project\n\n\n\n\n \n\nMerge the secondary branch\n\n\nTo merge branches, a pull request must be made\nThe pull request is a way to alert the repository owner that you want to make some changes to their code\nThe request allows reviewing the code and making sure it looks good before including the changes in the main branch. Once reviewed, the owner can decide whether to accept or reject those changes (“merge”).\n\nFirst, a pull request must be requested:\n\n\n\n \nAnd after ensuring there are no conflicts, the alternate branch and the main branch can be merged:\n\n\n\n \n \n\n\n\n0.2.4 Git + GitHub\n\nGit-managed local repositories can be hosted and/or synchronized with remote repositories hosted on GitHub\nThis combination of tools is particularly useful for remote collaborations and for sharing code with the community\n\n \n\n\n\n \n\n0.2.4.1 Steps\n\nClone the repository locally\n\n\nThis step is done using git on your computer\ngit clone creates a local copy of a project that already exists remotely\nThe clone includes all files, history, and branches of the project\nWe can use the course repository as an example: https://github.com/maRce10/curso_reproducible\nFirst, copy the https address of the repository (https://github.com/maRce10/curso_reproducible.git)\n\n \n\n\n\n \n\nAnd then run git clone locally:\n\n\n\nCode\n# clone remote repository\ngit clone https://github.com/maRce10/curso_reproducible.git\n\n\n \n\nSet up the remote repository locally\n\n\n\nCode\n# enter the folder\ncd ./curso_reproducible\n\n# initialize repository in git\ngit init\n\n# set the repository address\ngit remote add origin https://github.com/maRce10/curso_reproducible.git\n\n\n \n\nSend pull requests to GitHub\n\n\nOnce you have worked on a project locally, these changes can be synchronized with the repository on GitHub\ngit pull updates the remote development line with updates from its local counterpart\nThe change must be tracked and committed to be synchronized\n\n\n\nCode\n## track new changes\ngit add .\n\n# commit changes\ngit commit -m \"local change x\"\n\n# send the first request to github\ngit pull origin master\n\n# send subsequent changes to github \n\ngit pull\n\n\n \n\nUpdate local repository\n\n\nIf there are changes from your collaborators that have been synchronized with the repository on GitHub, they can be synchronized locally using git push\ngit push updates the local development line with updates from its remote counterpart\n\n\n\nCode\n# synchronize remote changes the first time\ngit push origin master\n\n# synchronize remote changes \ngit push\n\n\n \n \n\n\n\n0.2.5 Exercise 1\n\nIn your GitHub account, create a new repository\nCreate a README file remotely (on GitHub)\nClone the repository locally\nSynchronize the local repository with GitHub\nMake changes locally (e.g., add a text file) and send these changes to GitHub\n\n\n \n\n\n0.2.6 References\n\nBryan, J. (2018). Excuse Me, Do You Have a Moment to Talk About Version Control? American Statistician, 72(1), 20–27. https://doi.org/10.1080/00031305.2017.1399928\n\n\n\n\n:::{#quarto-navigation-envelope .hidden}\n[Reproducible Science Workshop, REU OTS 2024]{.hidden render-id=\"quarto-int-sidebar-title\"}\n[Reproducible Science Workshop, REU OTS 2024]{.hidden render-id=\"quarto-int-navbar-title\"}\n[Home]{.hidden render-id=\"quarto-int-navbar:Home\"}\n[/index.html]{.hidden render-id=\"quarto-int-navbar:/index.html\"}\n[Program]{.hidden render-id=\"quarto-int-navbar:Program\"}\n[/program.html]{.hidden render-id=\"quarto-int-navbar:/program.html\"}\n[Tutorials]{.hidden render-id=\"quarto-int-navbar:Tutorials\"}\n[R basics]{.hidden render-id=\"quarto-int-navbar:R basics\"}\n[/r_basics.html]{.hidden render-id=\"quarto-int-navbar:/r_basics.html\"}\n[Coding and reproducibility]{.hidden render-id=\"quarto-int-navbar:Coding and reproducibility\"}\n[/coding_and_reproducibility.html]{.hidden render-id=\"quarto-int-navbar:/coding_and_reproducibility.html\"}\n[Reearch compendiums]{.hidden render-id=\"quarto-int-navbar:Reearch compendiums\"}\n[/research_compendiums.html]{.hidden render-id=\"quarto-int-navbar:/research_compendiums.html\"}\n[Intro to git/github]{.hidden render-id=\"quarto-int-navbar:Intro to git/github\"}\n[/intro_to_git_and_github.html]{.hidden render-id=\"quarto-int-navbar:/intro_to_git_and_github.html\"}\n[Course prep]{.hidden render-id=\"quarto-int-navbar:Course prep\"}\n[/course_prep.html]{.hidden render-id=\"quarto-int-navbar:/course_prep.html\"}\n[Code sharing]{.hidden render-id=\"quarto-int-navbar:Code sharing\"}\n[https://codefile.io/f/inMsojTFoN]{.hidden render-id=\"quarto-int-navbar:https://codefile.io/f/inMsojTFoN\"}\n[Instructor]{.hidden render-id=\"quarto-int-navbar:Instructor\"}\n[/instructor.html]{.hidden render-id=\"quarto-int-navbar:/instructor.html\"}\n[https://github.com/maRce10/OTS_REU_OS_2024/]{.hidden render-id=\"quarto-int-navbar:https://github.com/maRce10/OTS_REU_OS_2024/\"}\n\n:::{.hidden render-id=\"footer-center\"}\nCopyright 2024 | &lt;a href=\"https://marce10.github.io\"&gt;Marcelo Araya-Salas&lt;/a&gt;\n:::\n\n:::\n\n\n\n:::{#quarto-meta-markdown .hidden}\n[Reproducible Science Workshop, REU OTS 2024 - &lt;center&gt;&lt;font size=\"7\"&gt;&lt;b&gt;Introduction to Git and GitHub&lt;/b&gt;&lt;/font&gt;&lt;/center&gt;]{.hidden render-id=\"quarto-metatitle\"}\n[Reproducible Science Workshop, REU OTS 2024 - &lt;center&gt;&lt;font size=\"7\"&gt;&lt;b&gt;Introduction to Git and GitHub&lt;/b&gt;&lt;/font&gt;&lt;/center&gt;]{.hidden render-id=\"quarto-twittercardtitle\"}\n[Reproducible Science Workshop, REU OTS 2024 - &lt;center&gt;&lt;font size=\"7\"&gt;&lt;b&gt;Introduction to Git and GitHub&lt;/b&gt;&lt;/font&gt;&lt;/center&gt;]{.hidden render-id=\"quarto-ogcardtitle\"}\n[Reproducible Science Workshop, REU OTS 2024]{.hidden render-id=\"quarto-metasitename\"}\n[]{.hidden render-id=\"quarto-twittercarddesc\"}\n[]{.hidden render-id=\"quarto-ogcardddesc\"}\n:::\n\n\n\n\n&lt;!-- --&gt;\n\n::: {.quarto-embedded-source-code}\n```````````````````{.markdown shortcodes=\"false\"}\n---\ntitle: &lt;center&gt;&lt;font size=\"7\"&gt;&lt;b&gt;Introduction to Git and GitHub&lt;/b&gt;&lt;/font&gt;&lt;/center&gt;\ntoc: true\ntoc-depth: 2\ntoc-location: left\nnumber-sections: true\nhighlight-style: pygments\nformat:\n  html:\n    df-print: kable\n    code-fold: show\n    code-tools: true\n    css: styles.css\n    link-external-icon: true\n    link-external-newwindow: true  \n---\n\n&nbsp; \n\n```{r, echo = FALSE}\n\n# devtools::install_github(\"hadley/emo\")\nlibrary(\"emo\")\nlibrary(\"xaringanExtra\")\nlibrary(\"knitr\")\n\n# options to customize chunk outputs\nknitr::opts_chunk$set(\n  tidy.opts = list(width.cutoff = 65), \n  tidy = TRUE,\n  message = FALSE\n )\n\n# this is a customized printing style data frames \n# screws up tibble function\ntibble &lt;- function(x, ...) { \n  x &lt;- kbl(x, digits=4, align= 'c', row.names = FALSE) \n   x &lt;- kable_styling(x, position =\"center\", full_width = FALSE,  bootstrap_options = c(\"striped\", \"hover\", \"condensed\", \"responsive\")) \n   asis_output(x)\n}\n\nregisterS3method(\"knit_print\", \"data.frame\", tibble)"
  },
  {
    "objectID": "intro_to_git_and_github.html#git-and-github-1",
    "href": "intro_to_git_and_github.html#git-and-github-1",
    "title": "\nIntroduction to Git and GitHub\n",
    "section": "0.3 Git and GitHub",
    "text": "0.3 Git and GitHub\nGit and GitHub are different but complementary tools for the development of programming projects or related work. Git is a computational version control tool that is used practically worldwide. GitHub can be described as the most popular online platform for hosting programming projects (i.e., code). However, this definition is simplistic: GitHub offers many other tools to facilitate collaboration and publication of programming-related projects.\n\nGit → version control\nGithub → online repository"
  },
  {
    "objectID": "intro_to_git_and_github.html#git-version-control-1",
    "href": "intro_to_git_and_github.html#git-version-control-1",
    "title": "\nIntroduction to Git and GitHub\n",
    "section": "0.4 Git: Version Control",
    "text": "0.4 Git: Version Control\nA version control system tracks the history of changes as people and teams collaborate on projects together. As the project evolves, teams can run tests, fix bugs, and contribute new code with the confidence that any version can be retrieved at any time.\n\n\n\n\nTaken from Bryan 2018\n\nVersion control:\n\nKeeps track of changes made\nFacilitates collaborative work\nAllows knowing who changed what and when\nAllows reverting changes\n\nGit does not need a permanent connection to a central repository and allows asynchronous work of collaborators.\n \n\n0.4.1 Installing Git\n\n\n0.4.1.1 Install Git on Linux\nGit was originally developed on the Linux operating system. Therefore, it makes sense that it’s easier to set up to run on Linux. You can install Git on Linux via the package management tool that comes with your distribution:\n\nGit packages are available using apt\nIt’s a good idea to ensure you’re running the latest version. To do this, navigate to the command prompt terminal and run the following command to ensure everything is up to date: sudo apt update\nTo install Git, run the following command: sudo apt install git-all\nOnce the command output is complete, you can check the installation by typing: git version\n\n\n\n\n0.4.1.2 Install Git on Windows\n\nFind the latest installer for Git for Windows and download the latest version\nOnce the installer has started, follow the instructions provided on the Git Setup Wizard screen until installation is complete\nOpen the Windows terminal or Git Bash\nType the git version to verify that Git is installed (git version)\n\n\nNote: git-scm is recommended to download Git for Windows. The advantage of downloading Git from git-scm is that it uses the latest version of Git and includes Git Bash.\n\n\n\n\n0.4.1.3 Install Git on macOS\nMost versions of macOS have Git installed. However, if you don’t have Git installed, you can install the latest version of Git using one of these methods:\n\n0.4.1.3.1 Install Git from an installer\n\nRun git --version in the terminal, if it’s not installed yet you will be prompted to install it\nOnce the installer has started, follow the instructions provided until installation is complete\n\n\n\n0.4.1.3.2 Install Git from Homebrew\nHomebrew is a package manager for macOS. If you already have Homebrew installed, you can follow these steps to install Git:\n\nOpen a terminal window and install Git using the following command: brew install git\nOnce the command output is complete, you can verify the installation by typing: git --version\n\n\n \n\n\n\n\n0.4.2 Using Git for Version Control\nGit is typically used from a terminal (console where code is run). In Windows, it is recommended to use the gitbash console. In Unix-based operating systems (macOS and Linux), it can be used directly from the default terminal.\n \n\n0.4.2.1 Steps\n\nSet up your Git identity\n\nGit uses a name and an email address to identify commits with an author (i.e., track which person is making which changes). Your Git identity is not the same as your GitHub account (we’ll talk about GitHub shortly), although both should use the same email address. Typically, you only need to set up your Git identity once per computer.\nYou can set your Git username like this:\n```{r, eval = FALSE}"
  },
  {
    "objectID": "intro_to_git_and_github.html#track-new-changes",
    "href": "intro_to_git_and_github.html#track-new-changes",
    "title": "\nIntroduction to Git and GitHub\n",
    "section": "8.1 track new changes",
    "text": "8.1 track new changes\ngit add ."
  },
  {
    "objectID": "program.html",
    "href": "program.html",
    "title": "Reproducible Science Workshop, REU OTS 2024",
    "section": "",
    "text": "Make sure you install all the software we will be using as detailed in here\nRead/watch the additional materials for day 1"
  },
  {
    "objectID": "program.html#day-1-video",
    "href": "program.html#day-1-video",
    "title": "Reproducible Science Workshop, REU OTS 2024",
    "section": "1 Day 1 (video)",
    "text": "1 Day 1 (video)\n\n\n\n1.1 Readings\n\n1.1.1 Reproducibility\n\nBaker, M. (2016). Reproducibility crisis. nature, 533(26), 353-66.\nCulina, A., van den Berg, I., Evans, S., & Sánchez-Tójar, A. (2020). Low availability of code in ecology: A call for urgent action. PLoS Biology, 18(7), e3000763.\n\n\n\n\n1.2 Videos\n\nReproducibility crisis\nReproducibility and open science\n\n \n\n\n1.3 Optional readings\n\n1.3.1 Reproducibility\n\nAlston, J. M., & Rick, J. A. (2021). A beginner’s guide to conducting reproducible research. Bulletin of the Ecological Society of America, 102(2), 1-14.\nCulina, A., van den Berg, I., Evans, S., & Sánchez-Tójar, A. (2020). Low availability of code in ecology: A call for urgent action. PLoS Biology, 18(7), e3000763.\n\n\n\n\n \nIntroduction Introduction\n\nHow animal acoustic signals look like?\nAnalytical workflow in bioacoustics research\nAdvantages of programming\nCourse outline\n\n \nWhat is sound? Sound\n\n\nCreate a Rstudio project for the course\nDownload this folder into the course project directory\n\n\n\nSound as a time series\nSound as a digital object\nAcoustic data in R\n‘wave’ object structure\n‘wave’ object manipulations\nadditional formats\n\n \n\n1.4 Homework\n\nUse the function query_xc() to check the availability of recordings for any bird species (do not download at this step) (check this brief tutorial on how to do that)\nSubset the data frame returned by the function to get a subset of subspecies/populations or recordings from a specific country and for certain vocalization type (using base R subsetting tools)\nDownload the associated recordings using query_xc() again\nExplore the recordings with any spectrogram creating GUI program"
  },
  {
    "objectID": "program.html#day-2-video",
    "href": "program.html#day-2-video",
    "title": "Reproducible Science Workshop, REU OTS 2024",
    "section": "2 Day 2 (video)",
    "text": "2 Day 2 (video)\n\n\n2.1 Videos\n\n2.1.1 Raven tutorials\n\nIntroduction to the Raven Pro Interface\nIntroduction to selections and measurements\nSaving, retrieving, and exporting selection tables\nUsing annotations\n\n\n\nBuilding spectrograms Building spectrograms\n\nFourier transform\nBuilding a spectrogram\nCharacteristics and limitations\nSpectrograms in R\n\nPackage seewave seewave\n\nExplore, modify and measure ‘wave’ objects\nSpectrograms and oscillograms\nFiltering and re-sampling\nAcoustic measurements\n\n \n\n2.2 Homework\n\nUse Raven Pro to annotate some of the signals found in the xeno-canto recordings you downloaded previously"
  },
  {
    "objectID": "program.html#day-3-video",
    "href": "program.html#day-3-video",
    "title": "Reproducible Science Workshop, REU OTS 2024",
    "section": "3 Day 3 (video)",
    "text": "3 Day 3 (video)\n\n\n3.1 Readings\n\nArasco, A. G., Manser, M., Watson, S. K., Kyabulima, S., Radford, A. N., Cant, M. A., & Garcia, M. (2023). Testing the acoustic adaptation hypothesis with vocalizations from three mongoose species. Animal Behaviour, 187, 71-95.\n\n\n \nAnnotation software annotations\n\nRaven / audacity\nOpen and explore recordings\nModify-optimize visualization parameters\nAnnotate signals\n\nQuantifying acoustic signal structure Quantify structure\n\nSpectro-temporal measurements (spectro_analysis())\nParameter description\nHarmonic content\nCepstral coefficients (mfcc_stats())\nCross-correlation (cross_correlation())\nDynamic time warping (freq_DTW())\nSignal-to-noise ratio (sig2noise())\nInflections (inflections())\nParameters at other levels (song_analysis())\n\n \n\n3.2 Homework\n\nDouble-check annotations using warbleR’s dedicated functions\n\n\nCreate single spectrograms of each annotation\nCreate full spectrograms of all sound files along with annotations\nCreate catalogs\n\n \n\nDouble-check annotations using Raven (export data from R to Raven)"
  },
  {
    "objectID": "program.html#day-4-video",
    "href": "program.html#day-4-video",
    "title": "Reproducible Science Workshop, REU OTS 2024",
    "section": "4 Day 4 (video)",
    "text": "4 Day 4 (video)\n\n\n4.1 Readings\n\n4.1.1 \n\nOdom, K. J., Cain, K. E., Hall, M. L., Langmore, N. E., Mulder, R. A., Kleindorfer, S., … & Webster, M. S. (2021). Sex role similarity and sexual selection predict male and female song elaboration and dimorphism in fairy‐wrens. Ecology and evolution, 11(24), 17901-17919.\n\n\n\n \nQuality control in recordings and annotation Quality checks\n\nCheck and modify sound file format (check_wavs(), info_wavs(), duration_wavs(), mp32wav() y fix_wavs())\nTuning spectrogram parameters (tweak_spectro())\nDouble-checking selection tables (check_sels(), spectrograms(), full_spectrograms() & catalog())\nRe-adjusting selections (tailor_sels())\n\nCharacterizing hierarchical levels in acoustic signals\n\nCreating ‘song’ spectrograms (full_spectrograms(), spectrograms())\n‘Song’ parameters (song_analysis())\n\n \n\n4.2 Homework\n\nSelect best quality signals for analysis\nMeasure acoustic parameters\nSummarize variation at higher hierachical levels (if necessary)"
  },
  {
    "objectID": "program.html#day-5-video",
    "href": "program.html#day-5-video",
    "title": "Reproducible Science Workshop, REU OTS 2024",
    "section": "5 Day 5 (video)",
    "text": "5 Day 5 (video)\n\n\n5.1 Readings\n\nBlog post: Potential issues of the ‘spectral parameters/PCA’ approach\nBlog post: Choosing the right method for measuring acoustic signal structure\n\n\n \nChoosing the right method for quantifying structure Comparing methods\n\nCompare different methods for quantifying structure (compare_methods())\n\nQuantifying acoustic spaces Acoustic space\n\nIntro to PhenotypeSpace\nQuanitfying space size\nComparing sub-spaces"
  },
  {
    "objectID": "program.html#day-1",
    "href": "program.html#day-1",
    "title": "Reproducible Science Workshop, REU OTS 2024",
    "section": "1 Day 1",
    "text": "1 Day 1\n\n\n1.1 Refresh basic R concepts Tutorial\n\nObject types in R\nSubsetting\nStyle matters\nR documentation\n\n\n\n1.2 Coding and reproducible research Tutorial\n\nFree software and code\nWhy R?\nTools for reproducible programming\n\n\n\n1.3 Additional materials\n\n1.3.1 Readings\n\nBaker, M. (2016). Reproducibility crisis. nature, 533(26), 353-66.\n\n\n\n1.3.2 Videos\n\nReproducibility crisis\nReproducibility and open science\n\n\n\n1.3.3 Optional\n\nAlston, J. M., & Rick, J. A. (2021). A beginner’s guide to conducting reproducible research. Bulletin of the Ecological Society of America, 102(2), 1-14.\nCulina, A., van den Berg, I., Evans, S., & Sánchez-Tójar, A. (2020). Low availability of code in ecology: A call for urgent action. PLoS Biology, 18(7), e3000763.\n\n\n\n \n\n1.4 Practice\n\nOn a scientific journal of your preference pick up 10 open access papers (or just 10 papers if you have access)\nSkim each paper to check if they have attempted to make it reproducible and which research components have been shared (like data or code). If there are not open research papers in the 10 you pick up keep looking until you find one.\nTry to access the supplementary materials containing the shared materials"
  },
  {
    "objectID": "program.html#day-2",
    "href": "program.html#day-2",
    "title": "Reproducible Science Workshop, REU OTS 2024",
    "section": "2 Day 2",
    "text": "2 Day 2\n\n\n2.1 Research compendiums Tutorial\n\nFolder structure formats\nR packages as templates for compendiums\nR Packages for Compendium Generation\n\n\n\n2.2 Intro to git/gihub Tutorial\n\nGit for version control\nSetting up a git project\nVersion control and collaboration with github\n\n\n\n2.3 Additional materials\n\n2.3.1 Readings\n\nVuorre, M., & Curley, J. P. (2018). Curating research assets: A tutorial on the Git version control system. Advances in Methods and Practices in Psychological Science, 1(2), 219-236.\n\n\n\n2.3.2 Videos\n\nWhat is git?\nWhat is version control?\nGit vs github\n\n\n\n2.3.3 Optional\n\nBryan, J. (2018). Excuse me, do you have a moment to talk about version control?. The American Statistician, 72(1), 20-27."
  },
  {
    "objectID": "reproducible_taxonomy.html",
    "href": "reproducible_taxonomy.html",
    "title": "\nReproducibility in the use of taxonomic information\n",
    "section": "",
    "text": "One aspect of scientific reproducibility that is specific to the biological sciences is how taxonomic information is obtained, used, and reported. In the discussion, we address the topics of using vouchers and the importance of adequately documenting the justification of taxonomic identifications. Here we will see a tool for obtaining and curating taxonomic information in a reproducible manner.\nWe will use the R package ‘taxize’. By the way, the article describing the package was published in the journal F1000Research, one of the journals we saw at the beginning of the semester is completely open.\n\n\n\nChamberlain and Szöcs (2013)."
  },
  {
    "objectID": "reproducible_taxonomy.html#introduction",
    "href": "reproducible_taxonomy.html#introduction",
    "title": "\nReproducibility in the use of taxonomic information\n",
    "section": "",
    "text": "One aspect of scientific reproducibility that is specific to the biological sciences is how taxonomic information is obtained, used, and reported. In the discussion, we address the topics of using vouchers and the importance of adequately documenting the justification of taxonomic identifications. Here we will see a tool for obtaining and curating taxonomic information in a reproducible manner.\nWe will use the R package ‘taxize’. By the way, the article describing the package was published in the journal F1000Research, one of the journals we saw at the beginning of the semester is completely open.\n\n\n\nChamberlain and Szöcs (2013)."
  },
  {
    "objectID": "reproducible_taxonomy.html#why-taxize",
    "href": "reproducible_taxonomy.html#why-taxize",
    "title": "\nReproducibility in the use of taxonomic information\n",
    "section": "0.2 Why ‘taxize’?",
    "text": "0.2 Why ‘taxize’?\nThere are online databases from which taxonomic information for various biological organisms can be obtained. However, there are advantages to performing these searches programmatically:\n\nit is more efficient if you have to search for many taxa\nthe search becomes a reproducible part of the workflow\n\nThe idea of taxize is to make the extraction and use of taxonomic information easy and reproducible.\n\n\n\n Image: Rohan Chakravarty/CC BY-NC-ND 3.0."
  },
  {
    "objectID": "reproducible_taxonomy.html#what-does-taxize-do",
    "href": "reproducible_taxonomy.html#what-does-taxize-do",
    "title": "\nReproducibility in the use of taxonomic information\n",
    "section": "0.3 What does ‘taxize’ do?",
    "text": "0.3 What does ‘taxize’ do?\n‘taxize’ connects with several taxonomic databases and more can be gradually added. This information can be used to carry out common tasks in the research process. For example:\n\n0.3.1 Resolves Taxonomic Names\nIf we have a list of specimens, we may want to know if we are using updated names and if the names we have are spelled correctly. We can do this using the Global Names Resolver (GNR) application from the Encyclopedia of Life, through taxize.\nAs an example, let’s look at occurrence data that I downloaded from GBIF. I downloaded records of birds from the genus Ramphocelus in Costa Rica, from the National Zoological Collection. Perhaps, I am working with or planning to work with these specimens.\nThe data is here (https://doi.org/10.15468/dl.d8frtc)\nand this is an example of the bird:\n\n\n\n&lt;\nfont size=“2”&gt; Ramphocelus sanguinolentus, La Fortuna, Costa Rica\n\n\n\nCode\n# read the data\ndat &lt;- read.csv(file = \"./additional_files/0098054-200613084148143.csv\",\n    header = T, sep = \"\\t\")\n\n# what are the species in CR?\nRam.names &lt;- levels(dat$species)\nRam.names\n\n\nNULL\n\n\nLet’s see which databases I can use to search for the names of my species\n\n\nCode\nlibrary(taxize)\nrequire(kableExtra)\ndata.sources &lt;- gnr_datasources()\n\ndata.sources[, c(1, 5, 8, 9)]\n\n\n\n\n\n\ncreated_at\nid\nrefresh_period_days\ntitle\n\n\n\n\n2012-07-06T11:36:36Z\n1\n14\nCatalogue of Life Checklist\n\n\n2012-07-06T11:38:14Z\n2\n14\nWikispecies\n\n\n2012-02-09T10:31:13Z\n3\n14\nIntegrated Taxonomic Information SystemITIS\n\n\n2012-02-09T10:47:55Z\n4\n14\nNational Center for Biotechnology Information\n\n\n2012-02-09T11:16:43Z\n5\n14\nIndex Fungorum (Species Fungorum)\n\n\n2012-02-09T11:28:38Z\n6\n14\nGRIN Taxonomy for Plants\n\n\n2012-02-09T11:32:18Z\n7\n14\nUnion 4\n\n\n2012-02-09T12:08:54Z\n8\n14\nThe Interim Register of Marine and Nonmarine Genera\n\n\n2012-02-09T12:40:45Z\n9\n14\nWorld Register of Marine Species\n\n\n2012-02-09T12:55:04Z\n10\n14\nFreebase\n\n\n2012-02-09T13:01:40Z\n11\n14\nGBIF Backbone Taxonomy\n\n\n2012-02-09T15:36:33Z\n12\n14\nEncyclopedia of Life\n\n\n2012-02-09T18:21:08Z\n93\n14\nPassiflora vernacular names\n\n\n2012-02-09T18:21:09Z\n94\n14\nInventory of Fish Species in the Wami River Basin\n\n\n2012-02-09T18:21:09Z\n95\n14\nPheasant Diversity and Conservation in the Mt. Gaoligonshan Region\n\n\n2012-02-09T18:21:09Z\n96\n14\nFinding Species\n\n\n2012-02-09T18:21:10Z\n97\n14\nBirds of Lindi Forests Plantation\n\n\n2012-02-09T18:21:11Z\n98\n14\nNemertea\n\n\n2012-02-09T18:21:12Z\n99\n14\nKihansi Gorge Amphibian Species Checklist\n\n\n2012-02-09T18:21:12Z\n100\n14\nMushroom Observer\n\n\n2012-02-09T18:21:14Z\n101\n14\nTaxonConcept\n\n\n2012-02-09T18:21:15Z\n102\n14\nAmphibia and Reptilia of Yunnan\n\n\n2012-02-09T18:21:17Z\n103\n14\nCommon names of Chilean Plants\n\n\n2012-07-06T11:49:07Z\n104\n14\nInvasive Species of Belgium\n\n\n2012-02-09T18:21:20Z\n105\n14\nZooKeys\n\n\n2012-02-09T18:21:23Z\n106\n14\nCOA Wildlife Conservation List\n\n\n2012-02-09T18:21:25Z\n107\n14\nAskNature\n\n\n2012-02-09T18:21:31Z\n108\n14\nChina: Yunnan, Southern Gaoligongshan, Rapid Biological Inventories Report No. 04\n\n\n2012-02-09T18:21:34Z\n109\n14\nNative Orchids from Gaoligongshan Mountains, China\n\n\n2012-02-09T18:21:37Z\n110\n14\nIllinois Wildflowers\n\n\n2012-02-09T18:21:45Z\n112\n14\nColeorrhyncha Species File\n\n\n2012-02-09T18:21:46Z\n113\n14\n/home/dimus/files/dwca/zoological names.zip\n\n\n2012-02-09T18:21:57Z\n114\n14\nPeces de la zona hidrogeográfica de la Amazonia, Colombia (Spreadsheet)\n\n\n2012-02-09T18:22:04Z\n115\n14\nEastern Mediterranean Syllidae\n\n\n2012-02-09T18:22:06Z\n116\n14\nGaoligong Shan Medicinal Plants Checklist\n\n\n2012-02-09T18:22:14Z\n117\n14\nbirds_of_tanzania\n\n\n2012-02-09T18:22:23Z\n118\n14\nAmphibiaWeb\n\n\n2012-02-09T18:22:38Z\n119\n14\ntanzania_plant_sepecimens\n\n\n2012-02-09T18:22:45Z\n120\n14\nPapahanaumokuakea Marine National Monument\n\n\n2012-02-09T18:23:21Z\n121\n14\nTaiwanese IUCN species list\n\n\n2012-02-09T18:23:27Z\n122\n14\nBioPedia\n\n\n2012-02-09T18:24:06Z\n123\n14\nAnAge\n\n\n2012-02-09T18:24:25Z\n124\n14\nEmbioptera Species File\n\n\n2012-02-09T18:24:28Z\n125\n14\nGlobal Invasive Species Database\n\n\n2012-02-09T18:24:38Z\n126\n14\nSendoya S., Fernández F. AAT de hormigas (Hymenoptera: Formicidae) del Neotrópico 1.0 2004 (Spreadsheet)\n\n\n2012-02-09T18:25:00Z\n127\n14\nFlora of Gaoligong Mountains\n\n\n2012-02-09T18:25:16Z\n128\n14\nARKive\n\n\n2012-02-09T18:25:27Z\n129\n14\nTrue Fruit Flies (Diptera, Tephritidae) of the Afrotropical Region\n\n\n2012-02-09T18:25:30Z\n130\n14\n3i - Typhlocybinae Database\n\n\n2012-02-09T18:26:09Z\n131\n14\nCATE Sphingidae\n\n\n2012-02-09T18:26:28Z\n132\n14\nZooBank\n\n\n2012-02-09T18:26:44Z\n133\n14\nDiatoms\n\n\n2012-02-09T18:27:14Z\n134\n14\nAntWeb\n\n\n2012-02-09T18:27:40Z\n135\n14\nEndemic species in Taiwan\n\n\n2012-02-09T18:28:15Z\n136\n14\nDermaptera Species File\n\n\n2012-02-09T18:28:21Z\n137\n14\nMantodea Species File\n\n\n2012-02-09T18:28:29Z\n138\n14\nBirds of the World: Recommended English Names\n\n\n2012-02-09T18:29:01Z\n139\n14\nNew Zealand Animalia\n\n\n2012-02-09T18:30:39Z\n140\n14\nBlattodea Species File\n\n\n2012-02-09T18:30:57Z\n141\n14\nPlecoptera Species File\n\n\n2012-02-09T18:31:58Z\n143\n14\nCoreoidea Species File\n\n\n2012-02-09T18:32:28Z\n144\n14\nFreshwater Animal Diversity Assessment - Normalized export\n\n\n2012-02-09T18:33:38Z\n145\n14\nCatalogue of Vascular Plant Species of Central and Northeastern Brazil\n\n\n2012-02-09T18:35:12Z\n146\n14\nWikipedia in EOL\n\n\n2012-02-09T18:36:49Z\n147\n14\nDatabase of Vascular Plants of Canada (VASCAN)\n\n\n2012-02-09T18:38:13Z\n148\n14\nPhasmida Species File\n\n\n2012-02-09T18:38:29Z\n149\n14\nOBIS\n\n\n2012-02-09T18:40:09Z\n150\n14\nUSDA NRCS PLANTS Database\n\n\n2012-02-09T18:42:04Z\n151\n14\nCatalog of Fishes\n\n\n2012-02-09T18:43:41Z\n152\n14\nAphid Species File\n\n\n2012-02-09T18:44:03Z\n153\n14\nThe National Checklist of Taiwan\n\n\n2012-02-09T18:46:06Z\n154\n14\nPsocodea Species File\n\n\n2012-02-09T18:46:24Z\n155\n14\nFishBase\n\n\n2012-02-09T18:48:19Z\n156\n14\n3i - Typhlocybinae Database\n\n\n2012-02-09T18:48:44Z\n157\n14\nBelgian Species List\n\n\n2012-02-09T18:51:49Z\n158\n14\nEUNIS\n\n\n2012-02-09T18:58:36Z\n159\n14\nCU*STAR\n\n\n2012-02-09T19:10:42Z\n161\n14\nOrthoptera Species File\n\n\n2012-02-09T19:11:37Z\n162\n14\nBishop Museum\n\n\n2012-02-09T19:18:20Z\n163\n14\nIUCN Red List of Threatened Species\n\n\n2012-02-09T19:20:46Z\n164\n14\nBioLib.cz\n\n\n2012-02-09T19:43:03Z\n165\n14\nTropicos - Missouri Botanical Garden\n\n\n2012-02-09T20:05:41Z\n166\n14\nnlbif\n\n\n2012-02-09T20:36:27Z\n167\n14\nThe International Plant Names Index\n\n\n2012-05-07T13:45:07Z\n168\n14\nIndex to Organism Names\n\n\n2012-05-07T13:50:15Z\n169\n14\nuBio NameBank\n\n\n2013-05-31T01:17:28Z\n170\n14\nArctos\n\n\n2013-12-10T03:02:58Z\n171\n14\nChecklist of Beetles (Coleoptera) of Canada and Alaska. Second Edition.\n\n\n2014-12-08T11:17:24Z\n172\n14\nThe Paleobiology Database\n\n\n2014-12-08T19:50:56Z\n173\n14\nThe Reptile Database\n\n\n2014-12-09T21:27:18Z\n174\n14\nThe Mammal Species of The World\n\n\n2014-12-11T00:19:59Z\n175\n14\nBirdLife International\n\n\n2015-03-03T13:48:51Z\n176\n14\nChecklist da Flora de Portugal (Continental, Açores e Madeira)\n\n\n2016-07-20T11:13:25Z\n177\n14\nFishBase Cache\n\n\n2016-10-18T20:00:31Z\n178\n14\nSilva\n\n\n2016-10-19T10:13:10Z\n179\n14\nOpen Tree of Life Reference Taxonomy\n\n\n2016-10-30T00:46:40Z\n180\n14\niNaturalist Taxonomy\n\n\n2016-11-03T16:09:05Z\n181\n14\nThe Interim Register of Marine and Nonmarine Genera\n\n\n2017-03-22T15:26:50Z\n182\n14\nGymno\n\n\n2020-05-25T02:43:22Z\n183\n14\nIndex Animalium by Charles Davies Sherborn\n\n\n2020-05-25T10:32:16Z\n184\n14\nASM Mammal Diversity Database\n\n\n2020-05-27T01:41:11Z\n185\n14\nIOC World Bird List\n\n\n2020-05-28T00:01:22Z\n186\n14\nMCZbase\n\n\n2020-05-28T16:50:17Z\n187\n14\nThe eBird/Clements Checklist of Birds of the World\n\n\n2020-05-30T00:58:32Z\n188\n14\nAmerican Ornithological Society\n\n\n2020-05-31T00:36:35Z\n189\n14\nHoward and Moore Complete Checklist of the Birds of the World\n\n\n2020-05-31T01:23:24Z\n193\n14\nMyriatrix\n\n\n2021-03-19T16:48:41Z\n194\n14\nPLAZI treatments\n\n\n2021-10-21T12:27:48Z\n195\n14\nAlgaeBase\n\n\n2021-12-28T13:04:34Z\n196\n14\nWorld Flora Online Plant List 2023-12\n\n\n2021-12-29T13:29:11Z\n197\n14\nWorld Checklist of Vascular Plants\n\n\n2021-12-30T14:32:51Z\n198\n14\nThe Leipzig Catalogue of Vascular Plants\n\n\n2022-01-14T22:16:40Z\n200\n14\nThe Terrestrial Parasite Tracker\n\n\n2022-02-14T15:59:43Z\n201\n14\nICTV Virus Taxonomy\n\n\n2022-02-18T21:58:40Z\n202\n14\nDiscover Life Bee Species Guide\n\n\n2023-03-01T22:57:31Z\n203\n14\nMycoBank\n\n\n2023-03-01T23:38:23Z\n204\n14\nFungal Names\n\n\n2023-05-01T16:19:21Z\n205\n14\nNomenclator Zoologicus\n\n\n2023-08-22T20:12:02Z\n206\n14\nRuhoff 1980\n\n\n2023-10-09T19:23:23Z\n207\n14\nWikidata\n\n\n2023-12-06T21:42:18Z\n208\n14\nList of Prokaryotic names with Standing in Nomenclature\n\n\n2023-12-22T12:47:04Z\n209\n14\nNew Zealand Organizm Register\n\n\n\n\n\n\nLet’s check if they are spelled correctly\n\n\nCode\nname.res &lt;- gnr_resolve(sci = Ram.names, data_source_ids = c(3:4))\nname.res[, -1]\n\n\nAnd what if they weren’t?\n\n\nCode\nRam.names2 &lt;- Ram.names\nRam.names2[2] &lt;- \"Ramphocelus passerini\"\nname.res2 &lt;- gnr_resolve(sci = Ram.names2, data_source_ids = c(3:4))\nname.res2[, -1]\n\n\n\n\n\n\nsubmitted_name\nmatched_name\ndata_source_title\nscore\n\n\n\n\nRamphocelus passerini\nRamphocelus passerinii Bonaparte, 1831\nIntegrated Taxonomic Information SystemITIS\n0.75\n\n\nRamphocelus passerini\nRamphocelus passerinii\nNational Center for Biotechnology Information\n0.75\n\n\n\n\n\n\n\n\n0.3.2 Identifies Synonyms\nLet’s search for synonyms for these species\n\n\nCode\nsynonyms(sci_id = Ram.names, db = \"itis\")\n\n\nTo use some databases, it is necessary to obtain an ‘API key’. This cannot be done automatically with ‘taxize’ but instructions on how to obtain and save the API key for use from R can be obtained. Let’s look at a couple of examples:\n\n\nCode\nuse_tropicos()\nuse_iucn()\nuse_entrez()\n\n# for more information\n`?`(key_helpers())\n`?`(`taxize-authentication`)\n\n\n\n\n0.3.2.1 Exercise 1\n\nInstall the ‘usethis’ package with the command install.packages(\"usethis\")\nObtain the ‘API key’ for a database of your interest\nAdd this ‘API key’ to your environment in R with the command usethis::edit_r_environ()\nRestart R and verify that you have the ‘API key’ using getkey()\nIf everything went well, you’re ready to use it.\n\n\n \n\n\n0.3.3 Extracts Taxonomic Classification\nWe can obtain information about the higher taxonomic classification of our species. If your key is for ‘tropicos’ or ‘entrez’, you can use the respective databases (tropicos and ncbi). For example:\n\n\nCode\nRam.class &lt;- classification(Ram.names, db = \"ncbi\")\n\nRam.class[[1]]\n\n\nand if we just want to know the family…\n\n\nCode\nRam.fam &lt;- tax_name(sci = Ram.names, get = \"family\", db = \"ncbi\")\n\nRam.fam\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0.3.4 Gets Downstream Names\nPerhaps we want to know which or how many are the members of a certain taxonomic group. For example, how many species are in the genus Ramphocelus?\n\n\nCode\n# separate the genus\ngenus &lt;- strsplit(Ram.names[1], \" \")[[1]][1]\n\n# get the species\nRam.down &lt;- downstream(sci_id = genus, downto = \"species\", db = \"ncbi\")\nRam.down[[1]]\n\n\n\n\n0.3.5 Gets Conservation Status Information\nIf you have the ‘API key’ for IUCN, you can obtain information about conservation status.\nNOTE: The authors of ‘taxize’ warn to use with caution as there may be errors\n\n\nCode\nRam.sum &lt;- iucn_summary(Ram.names)\niucn_status(Ram.sum)\nget_iucn(Ram.names)"
  },
  {
    "objectID": "reproducible_taxonomy.html#examples-of-applications-in-reproducible-science",
    "href": "reproducible_taxonomy.html#examples-of-applications-in-reproducible-science",
    "title": "\nReproducibility in the use of taxonomic information\n",
    "section": "0.4 Examples of Applications in Reproducible Science",
    "text": "0.4 Examples of Applications in Reproducible Science\nLet’s see some examples of how using tools like ‘taxize’ contributes to more reproducible research.\n\n0.4.1 Lists of Hosts in Thousands of Communities\n\n\n\n Article by Gibb et al. 2020, Nature\n\nFrom the methods section:\n“We compiled animal host–pathogen associations from several source databases, to provide as comprehensive a dataset as possible of zoonotic host species and their pathogens: the Enhanced Infectious Diseases (EID2) database; the Global Mammal Parasite Database v.2.0 (GMPD2) which collates records of parasites of cetartiodactyls, carnivores and primates; a reservoir hosts database; a mammal–virus associations database; and a rodent zoonotic reservoirs database augmented with pathogen data from the Global Infectious Disease and Epidemiology Network (GIDEON) (Supplementary Table 8). We harmonized species names across all databases, excluding instances in which either hosts or pathogens could not be classified to species level. To prevent erroneous matches due to misspelling or taxonomic revision, all host species synonyms were accessed from Catalogue Of Life using ‘taxize’ v.0.8.939. Combined, the dataset contained 20,382 associations between 3,883 animal host species and 5,694 pathogen species.”\nLet’s see the code from the article and make a small modification to apply the function to our data.\n\n\nCode\n# taxize/GBIFr\nrequire(taxize)\nrequire(rgbif)\nlibrary(plyr)\n\n# function to find and resolve taxonomic synonyms based on Encyclopedia of Life\nfindSyns2 &lt;- function(x){\n  \n  # get specific species name\n  #taxname = hosts_vec[x]\n  # a small change to use the function with our data\n  taxname = x\n  # print progress\n  print(paste(\"Processing:\", taxname, sep=\" \"))\n  \n  # phyla\n  phyla = c(\"Chordata\",\"Arthropoda\",\"Gastropoda\", \"Mollusca\")\n  \n  # (1) resolve misspellings\n  taxname_resolved = gnr_resolve(taxname, with_canonical_ranks = TRUE)$matched_name2[1]\n  if(!is.null(taxname_resolved)){ if(length(strsplit(taxname_resolved, \" \", fixed=TRUE)[[1]]) == 2 ){ taxa = taxname_resolved }}\n  if(!is.null(taxname_resolved)){ if(length(strsplit(taxname_resolved, \" \", fixed=TRUE)[[1]]) &gt; 2 ){ taxa = paste(strsplit(taxname_resolved, \" \", fixed=TRUE)[[1]][1:2], collapse=\" \")} }\n  \n  # if taxa == NA, return list with nothing defined \n  if(is.na(taxa)){   if(class(syns)[1] == 'simpleError'){ return(data.frame(Original=taxname, Submitted=taxname_resolved, Accepted_name=NA, Selected_family=NA, Selected_order=NA, Selected_class=NA, Synonyms=NA))} }\n  \n  # (2) remove sub-species categorizations and set 'genus' and 'species' variables\n  genus = NULL\n  if(length(strsplit(taxa, \" \", fixed=TRUE)[[1]]) %in% c(2,3)){ genus = strsplit(taxa,\" \",fixed=TRUE)[[1]][1]; species = strsplit(taxa,\" \",fixed=TRUE)[[1]][2] }\n  if(length(strsplit(taxa, \"_\", fixed=TRUE)[[1]]) %in% c(2,3)){ genus = strsplit(taxa,\"_\",fixed=TRUE)[[1]][1]; species = strsplit(taxa,\"_\",fixed=TRUE)[[1]][2] }\n  if(length(strsplit(taxa, \" \", fixed=TRUE)[[1]]) &gt;3 | length(strsplit(taxa, \"_\" , fixed=TRUE)[[1]][1]) &gt; 3){ return(\"name error\") }\n  if(is.null(genus)){ genus = taxa; species = NA }\n  \n  # (3) use genus to lookup family, order, class\n  syns = tryCatch( name_lookup(genus)$data, error = function(e) e)\n  if(class(syns)[1] == 'simpleError'){ return(data.frame(Original=taxname, Submitted=taxa, Accepted_name=NA, Selected_family=NA, Selected_order=NA, Selected_class=NA, Synonyms=NA))}\n  \n  # for cases where the lookup does not find a phylum within the specified range\n  if(all(! syns$phylum %in% phyla)){\n    fam1 = syns$family[ !is.na(syns$family) & !is.na(syns$phylum) ]\n    order1 = syns$order[ !is.na(syns$family) & !is.na(syns$phylum) ]\n    class1 = syns$class[ !is.na(syns$family) & !is.na(syns$phylum) ]\n    datfam = data.frame(fam1=fam1, order=1:length(fam1), order1=order1, class1=class1)\n    # select highest frequency fam/class/order combo\n    fam2 = as.data.frame( table(datfam[ , c(1,3,4)]) )\n    family2 = as.vector(fam2[ fam2$Freq==max(fam2$Freq, na.rm=TRUE), \"fam1\"] ) \n    order2 = as.vector(fam2[ fam2$Freq==max(fam2$Freq, na.rm=TRUE), \"order1\"] )\n    class2 = as.vector(fam2[ fam2$Freq==max(fam2$Freq, na.rm=TRUE), \"class1\"] )\n    if(length(fam2) &gt; 1){\n      datfam2 = datfam[datfam$fam1 %in% family2, ]\n      family2 = as.vector(datfam2[datfam2$order == min(datfam2$order, na.rm=TRUE), \"fam1\"])\n      order2 = as.vector(datfam2[datfam2$order == min(datfam2$order, na.rm=TRUE), \"order1\"])\n      class2 = as.vector(datfam2[datfam2$order == min(datfam2$order, na.rm=TRUE), \"class1\"])\n    }\n  } else {  # for everything else\n    fam1 = syns$family[ !is.na(syns$family) & !is.na(syns$phylum) & (syns$phylum %in% phyla) ]\n    order1 = syns$order[ !is.na(syns$family) & !is.na(syns$phylum) & (syns$phylum %in% phyla) ]\n    class1 = syns$class[ !is.na(syns$family) & !is.na(syns$phylum) & (syns$phylum %in% phyla) ]\n    datfam = data.frame(fam1=fam1, order=1:length(fam1), order1 = order1, class1=class1)\n    # select highest frequency fam/class/order combo\n    fam2 = as.data.frame( table(datfam[ , c(1,3,4)]) )\n    family2 = as.vector(fam2[ fam2$Freq==max(fam2$Freq, na.rm=TRUE), \"fam1\"] ) \n    order2 = as.vector(fam2[ fam2$Freq==max(fam2$Freq, na.rm=TRUE), \"order1\"] )\n    class2 = as.vector(fam2[ fam2$Freq==max(fam2$Freq, na.rm=TRUE), \"class1\"] )\n    # select highest in list if more than one max\n    if(length(family2) &gt; 1){\n      datfam2 = datfam[datfam$fam1 %in% family2, ]\n      family2 = as.vector(datfam2[datfam2$order == min(datfam2$order, na.rm=TRUE), \"fam1\"])\n      order2 = as.vector(datfam2[datfam2$order == min(datfam2$order, na.rm\n\n=TRUE), \"order1\"])\n      class2 = as.vector(datfam2[datfam2$order == min(datfam2$order, na.rm=TRUE), \"class1\"])\n    } \n  }\n\n  # (4) search for species synonyms in ITIS\n  syns = tryCatch(suppressMessages(synonyms(taxa, db='itis')), error=function(e) e)\n  if(class(syns)[1] == 'simpleError'){ return(data.frame(Original=taxname, Submitted=taxa, Accepted_name=\"failed\", Selected_family=family2, Selected_order=order2, Selected_class=class2, Synonyms=\"failed\"))}\n  syns = as.data.frame(syns[[1]])\n  \n  # get info\n  original = taxa\n  accepted_name = taxa # save accepted name as original searched name\n  if(\"acc_name\" %in% names(syns)){ accepted_name = syns$acc_name } # unless search shows that this is not the accepted name\n   if(\"syn_name\" %in% names(syns)){ synonyms = unique(syns$syn_name) \n  } else{ synonyms = NA }\n  \n  # combine into list and add synonyms \n  result = data.frame(Original=taxname, \n                      Submitted=taxa,\n                      Accepted_name=accepted_name,\n                      Selected_family=family2,\n                      Selected_order=order2,\n                      Selected_class=class2)\n  result = do.call(\"rbind\", replicate(length(synonyms), result[1, ], simplify = FALSE))\n  result$Synonyms = synonyms\n  return(result)\n}\n\n# nest function within a tryCatch call in case of any errors\nfindSyns3 = function(x){\n  result = tryCatch(findSyns2(x), error=function(e) NULL)\n  return(result)\n}\n\n\nEarlier, we saw that there’s a name synonymous with Ramphocelus sanguinolentus. What would the function by Gibb et al. do with that?\n\n\nCode\nRam.syn1 &lt;- findSyns3(\"Phlogothraupis sanguinolenta\")\n\n\n[1] \"Processing: Phlogothraupis sanguinolenta\"\n══  1 queries  ═══════════════\n✔  Found:  Phlogothraupis sanguinolenta\n══  Results  ═════════════════\n\n• Total: 1 \n• Found: 1 \n• Not Found: 0\n\n\nCode\nRam.syn1\n\n\n\n\n\n\nOriginal\nSubmitted\nAccepted_name\nSelected_family\nSelected_order\nSelected_class\nSynonyms\n\n\n\n\nPhlogothraupis sanguinolenta\nPhlogothraupis sanguinolenta\nRamphocelus sanguinolentus\nThraupidae\nPasseriformes\nAves\nPhlogothraupis sanguinolenta\n\n\n\n\n\n\nAnd with one that’s misspelled?\n\n\nCode\nRam.syn2 &lt;- findSyns3(Ram.names2[2])\n\n\n[1] \"Processing: Ramphocelus passerini\"\n══  1 queries  ═══════════════\n✔  Found:  Ramphocelus passerinii\n══  Results  ═════════════════\n\n• Total: 1 \n• Found: 1 \n• Not Found: 0\n\n\nCode\nRam.syn2\n\n\n\n\n\n\nOriginal\nSubmitted\nAccepted_name\nSelected_family\nSelected_order\nSelected_class\nSynonyms\n\n\n\n\nRamphocelus passerini\nRamphocelus passerinii\nRamphocelus passerinii\nThraupidae\nPasseriformes\nAves\nNA\n\n\n\n\n\n\n\n\n0.4.2 Camera trap data management\n\n\n\n Article by Niedballa et al. 2016,Methods Ecol. Evol.\n\nFrom the methods section:\n“Users are free to use any species names (or abbreviations or codes) they wish. If scientific or common species names are used, the function checkSpeciesNames can check them against the ITIS taxonomic database (www.itis.gov) and returns their matching counterparts (utilizing the R package taxize (Chamberlain & Szöcs 2013) internally), making sure species names and spelling are standardized and taxonomically sound, and thus making it easier to combine data sets from different studies.”\nLet’s see some examples from the camtrapR vignettes. We’re not going to download the package because the CRAN version of ‘camtrapR’ is not compatible with the CRAN version of ‘taxize’.\n\n\n\nLet’s rewrite the current function updating the arguments of ‘taxize’.\n\n\nCode\ncheckSpeciesNames &lt;- function(speciesNames, searchtype, accepted = TRUE,\n    ask = TRUE) {\n    if (!requireNamespace(\"taxize\", quietly = TRUE)) {\n        stop(\"Please install the package taxize to run this function\")\n    }\n    if (!requireNamespace(\"ritis\", quietly = TRUE)) {\n        stop(\"Please install the package ritis to run this function\")\n    }\n    searchtype &lt;- match.arg(searchtype, choices = c(\"scientific\",\n        \"common\"))\n    stopifnot(is.logical(accepted))\n    stopifnot(is.character(speciesNames) | is.factor(speciesNames))\n    speciesNames &lt;- unique(as.character(speciesNames))\n    file.sep &lt;- .Platform$file.sep\n    tsns &lt;- try(taxize::get_tsn(sci_com = speciesNames, searchtype = searchtype,\n        accepted = accepted, ask = ask, messages = FALSE))\n    if (inherits(tsns, \"try-error\")) {\n        message(paste(\"error in get_tsn. Exiting without results:\\n\",\n            tsns, sep = \"\"))\n        return(invisible(NULL))\n    }\n    tsns &lt;- taxize::as.tsn(unique(tsns), check = FALSE)\n    if (any(is.na(tsns))) {\n        not.matched &lt;- which(is.na(tsns))\n        warning(paste(\"found no matches for\", length(not.matched),\n            \"name(s):\\n\", paste(speciesNames[not.matched], collapse = \", \")),\n            immediate. = TRUE, call. = FALSE)\n        tsns_worked &lt;- taxize::as.tsn(tsns[-not.matched], check = FALSE)\n    } else {\n        tsns_worked &lt;- tsns\n    }\n\n    if (length(tsns_worked) &gt;= 1) {\n        scientific &lt;- common &lt;- author &lt;- rankname &lt;- taxon_status &lt;- data.frame(matrix(NA,\n            nrow = length(tsns_worked), ncol = 2), stringsAsFactors = FALSE)\n        colnames(scientific) &lt;- c(\"tsn\", \"combinedname\")\n        colnames(common) &lt;- c(\"tsn\", \"commonName\")\n        colnames(author) &lt;- c(\"tsn\", \"authorship\")\n        colnames(rankname) &lt;- c(\"tsn\", \"rankname\")\n        colnames(taxon_status) &lt;- c(\"tsn\", \"taxonUsageRating\")\n\n        for (i in 1:length(tsns_worked)) {\n\n            scientific_tmp &lt;- ritis::scientific_name(tsns_worked[i])\n            common_tmp &lt;- ritis::common_names(tsns_worked[i])\n            author_tmp &lt;- ritis::taxon_authorship(tsns_worked[i])\n            rankname_tmp &lt;- ritis::rank_name(tsns_worked[i])\n            if (\"tsn\" %in% colnames(scientific_tmp)) {\n                scientific[i, ] &lt;- scientific_tmp[c(\"tsn\", \"combinedname\")]\n            }\n            if (\"tsn\" %in% colnames(common_tmp)) {\n                if (length(unique(common_tmp$tsn)) &gt; 1) {\n                  common2 &lt;- tapply(common_tmp$commonName, INDEX = common_tmp$tsn,\n                    FUN = paste, collapse = file.sep)\n                  common_tmp &lt;- data.frame(commonName = common2, tsn = rownames(common2),\n                    stringsAsFactors = FALSE)\n                }\n                common[i, ] &lt;- common_tmp[, c(\"tsn\", \"commonName\")]\n            }\n            if (\"tsn\" %in% colnames(author_tmp)) {\n                author[i, ] &lt;- author_tmp[c(\"tsn\", \"authorship\")]\n            }\n            if (\"tsn\" %in% colnames(rankname_tmp)) {\n                rankname[i, ] &lt;- rankname_tmp[c(\"tsn\", \"rankname\")]\n            }\n            if (accepted == FALSE) {\n                taxon_status_tmp &lt;- ritis::core_metadata(tsns_worked[i])\n                if (\"tsn\" %in% colnames(taxon_status_tmp)) {\n                  taxon_status[i, ] &lt;- taxon_status_tmp[c(\"tsn\", \"taxonUsageRating\")]\n                }\n            }\n        }\n        dat.out &lt;- data.frame(user_name = speciesNames, tsn = as.numeric(tsns))\n        dat.out &lt;- merge(x = dat.out, y = scientific, by = \"tsn\",\n            all.x = TRUE, sort = FALSE)\n        dat.out &lt;- merge(x = dat.out, y = common, by = \"tsn\", all.x = TRUE,\n            sort = FALSE)\n        dat.out &lt;- merge(x = dat.out, y = author, by = \"tsn\", all.x = TRUE,\n            sort = FALSE)\n        dat.out &lt;- merge(x = dat.out, y = rankname, by = \"tsn\", all.x = TRUE,\n            sort = FALSE)\n        dat.out$itis_url &lt;- NA\n        dat.out$itis_url[match(tsns_worked, dat.out$tsn)] &lt;- attributes(tsns_worked)$uri\n        colnames(dat.out)[colnames(dat.out) == \"combinedname\"] &lt;- \"scientificName\"\n        if (accepted == FALSE) {\n            dat.out &lt;- merge(x = dat.out, y = taxon_status, by = \"tsn\",\n                all.x = TRUE, sort = FALSE)\n        } else {\n            dat.out$taxon_status[!is.na(dat.out$tsn)] &lt;- \"valid\"\n        }\n        return(dat.out)\n    } else {\n        stop(\"found no TSNs for speciesNames\", call. = FALSE)\n    }\n}\n\n\nNow, what can we do?\n\n0.4.2.1 Search information by common names\n\n\nCode\ncheckNames1 &lt;- checkSpeciesNames(speciesNames = c(\"Bearded Pig\", \"Malayan Civet\"),\n    searchtype = \"common\")\n\n\nWarning in `[&lt;-.data.frame`(`*tmp*`, i, , value = structure(list(tsn =\nc(\"625012\", : replacement element 1 has 2 rows to replace 1 rows\n\n\nWarning in `[&lt;-.data.frame`(`*tmp*`, i, , value = structure(list(tsn =\nc(\"625012\", : replacement element 2 has 2 rows to replace 1 rows\n\n\nCode\ncheckNames1 %&gt;%\n    kbl() %&gt;%\n    kable_minimal()\n\n\n\n\n\ntsn\nuser_name\nscientificName\ncommonName\nauthorship\nrankname\nitis_url\ntaxon_status\n\n\n\n\n625012\nBearded Pig\nSus barbatus\nbearded pig\nMüller, 1838\nSpecies\nhttps://www.itis.gov/servlet/SingleRpt/SingleRpt?search_topic=TSN&search_value=625012\nvalid\n\n\n622004\nMalayan Civet\nViverra tangalunga\nMalayan Civet\nGray, 1832\nSpecies\nhttps://www.itis.gov/servlet/SingleRpt/SingleRpt?search_topic=TSN&search_value=622004\nvalid\n\n\n\n\n\n\n\n\n\n0.4.2.2 Search information by scientific names (including subspecies)\n\n\nCode\ncheckNames2 &lt;- checkSpeciesNames(speciesNames = \"Viverra tangalunga tangalunga\",\n    searchtype = \"scientific\")\ncheckNames2 %&gt;%\n    kbl() %&gt;%\n    kable_minimal()\n\n\n\n\n\ntsn\nuser_name\nscientificName\ncommonName\nauthorship\nrankname\nitis_url\ntaxon_status\n\n\n\n\n726578\nViverra tangalunga tangalunga\nViverra tangalunga tangalunga\nNA\nGray, 1832\nSubspecies\nhttps://www.itis.gov/servlet/SingleRpt/SingleRpt?search_topic=TSN&search_value=726578\nvalid\n\n\n\n\n\n\n\n\n\n0.4.2.3 Search information with an incorrect name\n\n\nCode\ncheckNames3 &lt;- checkSpeciesNames(speciesNames = \"Felis bengalensis\",\n    searchtype = \"scientific\", accepted = FALSE)\n\ncheckNames3\n\n\n\n\n\n\ntsn\nuser_name\nscientificName\ncommonName\nauthorship\nrankname\nitis_url\ntaxonUsageRating\n\n\n\n\n183793\nFelis bengalensis\nFelis bengalensis\nleopard cat\nKerr, 1792\nSpecies\nhttps://www.itis.gov/servlet/SingleRpt/SingleRpt?search_topic=TSN&search_value=183793\ninvalid\n\n\n\n\n\n\n\n\n0.4.2.4 Search information with an ambiguous name\n\n\nCode\ncheckNames4 &lt;- checkSpeciesNames(speciesNames = \"Chevrotain\", searchtype = \"common\")\n# choose from the menu\ncheckNames4"
  },
  {
    "objectID": "reproducible_taxonomy.html#resolves-taxonomic-names",
    "href": "reproducible_taxonomy.html#resolves-taxonomic-names",
    "title": "\nReproducibility in the use of taxonomic information\n",
    "section": "3.1 Resolves Taxonomic Names",
    "text": "3.1 Resolves Taxonomic Names\nIf we have a list of specimens, we may want to know if we are using updated names and if the names we have are spelled correctly. We can do this using the Global Names Resolver (GNR) application from the Encyclopedia of Life, through taxize.\nAs an example, let’s look at occurrence data that I downloaded from GBIF. I downloaded records of birds from the genus Ramphocelus in Costa Rica, from the National Zoological Collection. Perhaps, I am working with or planning to work with these specimens.\nThe data is here (https://doi.org/10.15468/dl.d8frtc)\nand this is an example of the bird:\n\n\n\n&lt;\nfont size=“2”&gt; Ramphocelus sanguinolentus, La Fortuna, Costa Rica\n\n\n\nCode\n# read the data\ndat &lt;- read.csv(file = \"./additional_files/0098054-200613084148143.csv\",\n    header = T, sep = \"\\t\")\n\n# what are the species in CR?\nRam.names &lt;- levels(dat$species)\nRam.names\n\n\nNULL\n\n\nLet’s see which databases I can use to search for the names of my species\n\n\nCode\nlibrary(taxize)\nrequire(kableExtra)\ndata.sources &lt;- gnr_datasources()\n\ndata.sources[, c(1, 5, 8, 9)]\n\n\n\n\n\n\ncreated_at\nid\nrefresh_period_days\ntitle\n\n\n\n\n2012-07-06T11:36:36Z\n1\n14\nCatalogue of Life Checklist\n\n\n2012-07-06T11:38:14Z\n2\n14\nWikispecies\n\n\n2012-02-09T10:31:13Z\n3\n14\nIntegrated Taxonomic Information SystemITIS\n\n\n2012-02-09T10:47:55Z\n4\n14\nNational Center for Biotechnology Information\n\n\n2012-02-09T11:16:43Z\n5\n14\nIndex Fungorum (Species Fungorum)\n\n\n2012-02-09T11:28:38Z\n6\n14\nGRIN Taxonomy for Plants\n\n\n2012-02-09T11:32:18Z\n7\n14\nUnion 4\n\n\n2012-02-09T12:08:54Z\n8\n14\nThe Interim Register of Marine and Nonmarine Genera\n\n\n2012-02-09T12:40:45Z\n9\n14\nWorld Register of Marine Species\n\n\n2012-02-09T12:55:04Z\n10\n14\nFreebase\n\n\n2012-02-09T13:01:40Z\n11\n14\nGBIF Backbone Taxonomy\n\n\n2012-02-09T15:36:33Z\n12\n14\nEncyclopedia of Life\n\n\n2012-02-09T18:21:08Z\n93\n14\nPassiflora vernacular names\n\n\n2012-02-09T18:21:09Z\n94\n14\nInventory of Fish Species in the Wami River Basin\n\n\n2012-02-09T18:21:09Z\n95\n14\nPheasant Diversity and Conservation in the Mt. Gaoligonshan Region\n\n\n2012-02-09T18:21:09Z\n96\n14\nFinding Species\n\n\n2012-02-09T18:21:10Z\n97\n14\nBirds of Lindi Forests Plantation\n\n\n2012-02-09T18:21:11Z\n98\n14\nNemertea\n\n\n2012-02-09T18:21:12Z\n99\n14\nKihansi Gorge Amphibian Species Checklist\n\n\n2012-02-09T18:21:12Z\n100\n14\nMushroom Observer\n\n\n2012-02-09T18:21:14Z\n101\n14\nTaxonConcept\n\n\n2012-02-09T18:21:15Z\n102\n14\nAmphibia and Reptilia of Yunnan\n\n\n2012-02-09T18:21:17Z\n103\n14\nCommon names of Chilean Plants\n\n\n2012-07-06T11:49:07Z\n104\n14\nInvasive Species of Belgium\n\n\n2012-02-09T18:21:20Z\n105\n14\nZooKeys\n\n\n2012-02-09T18:21:23Z\n106\n14\nCOA Wildlife Conservation List\n\n\n2012-02-09T18:21:25Z\n107\n14\nAskNature\n\n\n2012-02-09T18:21:31Z\n108\n14\nChina: Yunnan, Southern Gaoligongshan, Rapid Biological Inventories Report No. 04\n\n\n2012-02-09T18:21:34Z\n109\n14\nNative Orchids from Gaoligongshan Mountains, China\n\n\n2012-02-09T18:21:37Z\n110\n14\nIllinois Wildflowers\n\n\n2012-02-09T18:21:45Z\n112\n14\nColeorrhyncha Species File\n\n\n2012-02-09T18:21:46Z\n113\n14\n/home/dimus/files/dwca/zoological names.zip\n\n\n2012-02-09T18:21:57Z\n114\n14\nPeces de la zona hidrogeográfica de la Amazonia, Colombia (Spreadsheet)\n\n\n2012-02-09T18:22:04Z\n115\n14\nEastern Mediterranean Syllidae\n\n\n2012-02-09T18:22:06Z\n116\n14\nGaoligong Shan Medicinal Plants Checklist\n\n\n2012-02-09T18:22:14Z\n117\n14\nbirds_of_tanzania\n\n\n2012-02-09T18:22:23Z\n118\n14\nAmphibiaWeb\n\n\n2012-02-09T18:22:38Z\n119\n14\ntanzania_plant_sepecimens\n\n\n2012-02-09T18:22:45Z\n120\n14\nPapahanaumokuakea Marine National Monument\n\n\n2012-02-09T18:23:21Z\n121\n14\nTaiwanese IUCN species list\n\n\n2012-02-09T18:23:27Z\n122\n14\nBioPedia\n\n\n2012-02-09T18:24:06Z\n123\n14\nAnAge\n\n\n2012-02-09T18:24:25Z\n124\n14\nEmbioptera Species File\n\n\n2012-02-09T18:24:28Z\n125\n14\nGlobal Invasive Species Database\n\n\n2012-02-09T18:24:38Z\n126\n14\nSendoya S., Fernández F. AAT de hormigas (Hymenoptera: Formicidae) del Neotrópico 1.0 2004 (Spreadsheet)\n\n\n2012-02-09T18:25:00Z\n127\n14\nFlora of Gaoligong Mountains\n\n\n2012-02-09T18:25:16Z\n128\n14\nARKive\n\n\n2012-02-09T18:25:27Z\n129\n14\nTrue Fruit Flies (Diptera, Tephritidae) of the Afrotropical Region\n\n\n2012-02-09T18:25:30Z\n130\n14\n3i - Typhlocybinae Database\n\n\n2012-02-09T18:26:09Z\n131\n14\nCATE Sphingidae\n\n\n2012-02-09T18:26:28Z\n132\n14\nZooBank\n\n\n2012-02-09T18:26:44Z\n133\n14\nDiatoms\n\n\n2012-02-09T18:27:14Z\n134\n14\nAntWeb\n\n\n2012-02-09T18:27:40Z\n135\n14\nEndemic species in Taiwan\n\n\n2012-02-09T18:28:15Z\n136\n14\nDermaptera Species File\n\n\n2012-02-09T18:28:21Z\n137\n14\nMantodea Species File\n\n\n2012-02-09T18:28:29Z\n138\n14\nBirds of the World: Recommended English Names\n\n\n2012-02-09T18:29:01Z\n139\n14\nNew Zealand Animalia\n\n\n2012-02-09T18:30:39Z\n140\n14\nBlattodea Species File\n\n\n2012-02-09T18:30:57Z\n141\n14\nPlecoptera Species File\n\n\n2012-02-09T18:31:58Z\n143\n14\nCoreoidea Species File\n\n\n2012-02-09T18:32:28Z\n144\n14\nFreshwater Animal Diversity Assessment - Normalized export\n\n\n2012-02-09T18:33:38Z\n145\n14\nCatalogue of Vascular Plant Species of Central and Northeastern Brazil\n\n\n2012-02-09T18:35:12Z\n146\n14\nWikipedia in EOL\n\n\n2012-02-09T18:36:49Z\n147\n14\nDatabase of Vascular Plants of Canada (VASCAN)\n\n\n2012-02-09T18:38:13Z\n148\n14\nPhasmida Species File\n\n\n2012-02-09T18:38:29Z\n149\n14\nOBIS\n\n\n2012-02-09T18:40:09Z\n150\n14\nUSDA NRCS PLANTS Database\n\n\n2012-02-09T18:42:04Z\n151\n14\nCatalog of Fishes\n\n\n2012-02-09T18:43:41Z\n152\n14\nAphid Species File\n\n\n2012-02-09T18:44:03Z\n153\n14\nThe National Checklist of Taiwan\n\n\n2012-02-09T18:46:06Z\n154\n14\nPsocodea Species File\n\n\n2012-02-09T18:46:24Z\n155\n14\nFishBase\n\n\n2012-02-09T18:48:19Z\n156\n14\n3i - Typhlocybinae Database\n\n\n2012-02-09T18:48:44Z\n157\n14\nBelgian Species List\n\n\n2012-02-09T18:51:49Z\n158\n14\nEUNIS\n\n\n2012-02-09T18:58:36Z\n159\n14\nCU*STAR\n\n\n2012-02-09T19:10:42Z\n161\n14\nOrthoptera Species File\n\n\n2012-02-09T19:11:37Z\n162\n14\nBishop Museum\n\n\n2012-02-09T19:18:20Z\n163\n14\nIUCN Red List of Threatened Species\n\n\n2012-02-09T19:20:46Z\n164\n14\nBioLib.cz\n\n\n2012-02-09T19:43:03Z\n165\n14\nTropicos - Missouri Botanical Garden\n\n\n2012-02-09T20:05:41Z\n166\n14\nnlbif\n\n\n2012-02-09T20:36:27Z\n167\n14\nThe International Plant Names Index\n\n\n2012-05-07T13:45:07Z\n168\n14\nIndex to Organism Names\n\n\n2012-05-07T13:50:15Z\n169\n14\nuBio NameBank\n\n\n2013-05-31T01:17:28Z\n170\n14\nArctos\n\n\n2013-12-10T03:02:58Z\n171\n14\nChecklist of Beetles (Coleoptera) of Canada and Alaska. Second Edition.\n\n\n2014-12-08T11:17:24Z\n172\n14\nThe Paleobiology Database\n\n\n2014-12-08T19:50:56Z\n173\n14\nThe Reptile Database\n\n\n2014-12-09T21:27:18Z\n174\n14\nThe Mammal Species of The World\n\n\n2014-12-11T00:19:59Z\n175\n14\nBirdLife International\n\n\n2015-03-03T13:48:51Z\n176\n14\nChecklist da Flora de Portugal (Continental, Açores e Madeira)\n\n\n2016-07-20T11:13:25Z\n177\n14\nFishBase Cache\n\n\n2016-10-18T20:00:31Z\n178\n14\nSilva\n\n\n2016-10-19T10:13:10Z\n179\n14\nOpen Tree of Life Reference Taxonomy\n\n\n2016-10-30T00:46:40Z\n180\n14\niNaturalist Taxonomy\n\n\n2016-11-03T16:09:05Z\n181\n14\nThe Interim Register of Marine and Nonmarine Genera\n\n\n2017-03-22T15:26:50Z\n182\n14\nGymno\n\n\n2020-05-25T02:43:22Z\n183\n14\nIndex Animalium by Charles Davies Sherborn\n\n\n2020-05-25T10:32:16Z\n184\n14\nASM Mammal Diversity Database\n\n\n2020-05-27T01:41:11Z\n185\n14\nIOC World Bird List\n\n\n2020-05-28T00:01:22Z\n186\n14\nMCZbase\n\n\n2020-05-28T16:50:17Z\n187\n14\nThe eBird/Clements Checklist of Birds of the World\n\n\n2020-05-30T00:58:32Z\n188\n14\nAmerican Ornithological Society\n\n\n2020-05-31T00:36:35Z\n189\n14\nHoward and Moore Complete Checklist of the Birds of the World\n\n\n2020-05-31T01:23:24Z\n193\n14\nMyriatrix\n\n\n2021-03-19T16:48:41Z\n194\n14\nPLAZI treatments\n\n\n2021-10-21T12:27:48Z\n195\n14\nAlgaeBase\n\n\n2021-12-28T13:04:34Z\n196\n14\nWorld Flora Online Plant List 2023-12\n\n\n2021-12-29T13:29:11Z\n197\n14\nWorld Checklist of Vascular Plants\n\n\n2021-12-30T14:32:51Z\n198\n14\nThe Leipzig Catalogue of Vascular Plants\n\n\n2022-01-14T22:16:40Z\n200\n14\nThe Terrestrial Parasite Tracker\n\n\n2022-02-14T15:59:43Z\n201\n14\nICTV Virus Taxonomy\n\n\n2022-02-18T21:58:40Z\n202\n14\nDiscover Life Bee Species Guide\n\n\n2023-03-01T22:57:31Z\n203\n14\nMycoBank\n\n\n2023-03-01T23:38:23Z\n204\n14\nFungal Names\n\n\n2023-05-01T16:19:21Z\n205\n14\nNomenclator Zoologicus\n\n\n2023-08-22T20:12:02Z\n206\n14\nRuhoff 1980\n\n\n2023-10-09T19:23:23Z\n207\n14\nWikidata\n\n\n2023-12-06T21:42:18Z\n208\n14\nList of Prokaryotic names with Standing in Nomenclature\n\n\n2023-12-22T12:47:04Z\n209\n14\nNew Zealand Organizm Register\n\n\n\n\n\n\nLet’s check if they are spelled correctly\n\n\nCode\nname.res &lt;- gnr_resolve(sci = Ram.names, data_source_ids = c(3:4))\nname.res[, -1]\n\n\nAnd what if they weren’t?\n\n\nCode\nRam.names2 &lt;- Ram.names\nRam.names2[2] &lt;- \"Ramphocelus passerini\"\nname.res2 &lt;- gnr_resolve(sci = Ram.names2, data_source_ids = c(3:4))\nname.res2[, -1]\n\n\n\n\n\n\nsubmitted_name\nmatched_name\ndata_source_title\nscore\n\n\n\n\nRamphocelus passerini\nRamphocelus passerinii Bonaparte, 1831\nIntegrated Taxonomic Information SystemITIS\n0.75\n\n\nRamphocelus passerini\nRamphocelus passerinii\nNational Center for Biotechnology Information\n0.75"
  },
  {
    "objectID": "reproducible_taxonomy.html#identifies-synonyms",
    "href": "reproducible_taxonomy.html#identifies-synonyms",
    "title": "\nReproducibility in the use of taxonomic information\n",
    "section": "3.2 Identifies Synonyms",
    "text": "3.2 Identifies Synonyms\nLet’s search for synonyms for these species\n\n\nCode\nsynonyms(sci_id = Ram.names, db = \"itis\")\n\n\nTo use some databases, it is necessary to obtain an ‘API key’. This cannot be done automatically with ‘taxize’ but instructions on how to obtain and save the API key for use from R can be obtained. Let’s look at a couple of examples:\n\n\nCode\nuse_tropicos()\nuse_iucn()\nuse_entrez()\n\n# for more information\n`?`(key_helpers())\n`?`(`taxize-authentication`)\n\n\n\n\n3.2.1 Exercise 1\n\nInstall the ‘usethis’ package with the command install.packages(\"usethis\")\nObtain the ‘API key’ for a database of your interest\nAdd this ‘API key’ to your environment in R with the command usethis::edit_r_environ()\nRestart R and verify that you have the ‘API key’ using getkey()\nIf everything went well, you’re ready to use it."
  },
  {
    "objectID": "reproducible_taxonomy.html#extracts-taxonomic-classification",
    "href": "reproducible_taxonomy.html#extracts-taxonomic-classification",
    "title": "\nReproducibility in the use of taxonomic information\n",
    "section": "3.3 Extracts Taxonomic Classification",
    "text": "3.3 Extracts Taxonomic Classification\nWe can obtain information about the higher taxonomic classification of our species. If your key is for ‘tropicos’ or ‘entrez’, you can use the respective databases (tropicos and ncbi). For example:\n\n\nCode\nRam.class &lt;- classification(Ram.names, db = \"ncbi\")\n\nRam.class[[1]]\n\n\nand if we just want to know the family…\n\n\nCode\nRam.fam &lt;- tax_name(sci = Ram.names, get = \"family\", db = \"ncbi\")\n\nRam.fam"
  },
  {
    "objectID": "reproducible_taxonomy.html#gets-downstream-names",
    "href": "reproducible_taxonomy.html#gets-downstream-names",
    "title": "\nReproducibility in the use of taxonomic information\n",
    "section": "3.4 Gets Downstream Names",
    "text": "3.4 Gets Downstream Names\nPerhaps we want to know which or how many are the members of a certain taxonomic group. For example, how many species are in the genus Ramphocelus?\n\n\nCode\n# separate the genus\ngenus &lt;- strsplit(Ram.names[1], \" \")[[1]][1]\n\n# get the species\nRam.down &lt;- downstream(sci_id = genus, downto = \"species\", db = \"ncbi\")\nRam.down[[1]]"
  },
  {
    "objectID": "reproducible_taxonomy.html#gets-conservation-status-information",
    "href": "reproducible_taxonomy.html#gets-conservation-status-information",
    "title": "\nReproducibility in the use of taxonomic information\n",
    "section": "3.5 Gets Conservation Status Information",
    "text": "3.5 Gets Conservation Status Information\nIf you have the ‘API key’ for IUCN, you can obtain information about conservation status.\nNOTE: The authors of ‘taxize’ warn to use with caution as there may be errors\n\n\nCode\nRam.sum &lt;- iucn_summary(Ram.names)\niucn_status(Ram.sum)\nget_iucn(Ram.names)"
  },
  {
    "objectID": "reproducible_taxonomy.html#lists-of-hosts-in-thousands-of-communities",
    "href": "reproducible_taxonomy.html#lists-of-hosts-in-thousands-of-communities",
    "title": "\nReproducibility in the use of taxonomic information\n",
    "section": "4.1 Lists of Hosts in Thousands of Communities",
    "text": "4.1 Lists of Hosts in Thousands of Communities\n\n\n\n Article by Gibb et al. 2020, Nature\n\nFrom the methods section:\n“We compiled animal host–pathogen associations from several source databases, to provide as comprehensive a dataset as possible of zoonotic host species and their pathogens: the Enhanced Infectious Diseases (EID2) database; the Global Mammal Parasite Database v.2.0 (GMPD2) which collates records of parasites of cetartiodactyls, carnivores and primates; a reservoir hosts database; a mammal–virus associations database; and a rodent zoonotic reservoirs database augmented with pathogen data from the Global Infectious Disease and Epidemiology Network (GIDEON) (Supplementary Table 8). We harmonized species names across all databases, excluding instances in which either hosts or pathogens could not be classified to species level. To prevent erroneous matches due to misspelling or taxonomic revision, all host species synonyms were accessed from Catalogue Of Life using ‘taxize’ v.0.8.939. Combined, the dataset contained 20,382 associations between 3,883 animal host species and 5,694 pathogen species.”\nLet’s see the code from the article and make a small modification to apply the function to our data.\n\n\nCode\n# taxize/GBIFr\nrequire(taxize)\nrequire(rgbif)\n\n# function to find and resolve taxonomic synonyms based on Encyclopedia of Life\nfindSyns2 &lt;- function(x){\n  \n  # get specific species name\n  #taxname = hosts_vec[x]\n  # a small change to use the function with our data\n  taxname = x\n  # print progress\n  print(paste(\"Processing:\", taxname, sep=\" \"))\n  \n  # phyla\n  phyla = c(\"Chordata\",\"Arthropoda\",\"Gastropoda\", \"Mollusca\")\n  \n  # (1) resolve misspellings\n  taxname_resolved = gnr_resolve(taxname, with_canonical_ranks = TRUE)$matched_name2[1]\n  if(!is.null(taxname_resolved)){ if(length(strsplit(taxname_resolved, \" \", fixed=TRUE)[[1]]) == 2 ){ taxa = taxname_resolved }}\n  if(!is.null(taxname_resolved)){ if(length(strsplit(taxname_resolved, \" \", fixed=TRUE)[[1]]) &gt; 2 ){ taxa = paste(strsplit(taxname_resolved, \" \", fixed=TRUE)[[1]][1:2], collapse=\" \")} }\n  \n  # if taxa == NA, return list with nothing defined \n  if(is.na(taxa)){   if(class(syns)[1] == 'simpleError'){ return(data.frame(Original=taxname, Submitted=taxname_resolved, Accepted_name=NA, Selected_family=NA, Selected_order=NA, Selected_class=NA, Synonyms=NA))} }\n  \n  # (2) remove sub-species categorizations and set 'genus' and 'species' variables\n  genus = NULL\n  if(length(strsplit(taxa, \" \", fixed=TRUE)[[1]]) %in% c(2,3)){ genus = strsplit(taxa,\" \",fixed=TRUE)[[1]][1]; species = strsplit(taxa,\" \",fixed=TRUE)[[1]][2] }\n  if(length(strsplit(taxa, \"_\", fixed=TRUE)[[1]]) %in% c(2,3)){ genus = strsplit(taxa,\"_\",fixed=TRUE)[[1]][1]; species = strsplit(taxa,\"_\",fixed=TRUE)[[1]][2] }\n  if(length(strsplit(taxa, \" \", fixed=TRUE)[[1]]) &gt;3 | length(strsplit(taxa, \"_\" , fixed=TRUE)[[1]][1]) &gt; 3){ return(\"name error\") }\n  if(is.null(genus)){ genus = taxa; species = NA }\n  \n  # (3) use genus to lookup family, order, class\n  syns = tryCatch( name_lookup(genus)$data, error = function(e) e)\n  if(class(syns)[1] == 'simpleError'){ return(data.frame(Original=taxname, Submitted=taxa, Accepted_name=NA, Selected_family=NA, Selected_order=NA, Selected_class=NA, Synonyms=NA))}\n  \n  # for cases where the lookup does not find a phylum within the specified range\n  if(all(! syns$phylum %in% phyla)){\n    fam1 = syns$family[ !is.na(syns$family) & !is.na(syns$phylum) ]\n    order1 = syns$order[ !is.na(syns$family) & !is.na(syns$phylum) ]\n    class1 = syns$class[ !is.na(syns$family) & !is.na(syns$phylum) ]\n    datfam = data.frame(fam1=fam1, order=1:length(fam1), order1=order1, class1=class1)\n    # select highest frequency fam/class/order combo\n    fam2 = as.data.frame( table(datfam[ , c(1,3,4)]) )\n    family2 = as.vector(fam2[ fam2$Freq==max(fam2$Freq, na.rm=TRUE), \"fam1\"] ) \n    order2 = as.vector(fam2[ fam2$Freq==max(fam2$Freq, na.rm=TRUE), \"order1\"] )\n    class2 = as.vector(fam2[ fam2$Freq==max(fam2$Freq, na.rm=TRUE), \"class1\"] )\n    if(length(fam2) &gt; 1){\n      datfam2 = datfam[datfam$fam1 %in% family2, ]\n      family2 = as.vector(datfam2[datfam2$order == min(datfam2$order, na.rm=TRUE), \"fam1\"])\n      order2 = as.vector(datfam2[datfam2$order == min(datfam2$order, na.rm=TRUE), \"order1\"])\n      class2 = as.vector(datfam2[datfam2$order == min(datfam2$order, na.rm=TRUE), \"class1\"])\n    }\n  } else {  # for everything else\n    fam1 = syns$family[ !is.na(syns$family) & !is.na(syns$phylum) & (syns$phylum %in% phyla) ]\n    order1 = syns$order[ !is.na(syns$family) & !is.na(syns$phylum) & (syns$phylum %in% phyla) ]\n    class1 = syns$class[ !is.na(syns$family) & !is.na(syns$phylum) & (syns$phylum %in% phyla) ]\n    datfam = data.frame(fam1=fam1, order=1:length(fam1), order1 = order1, class1=class1)\n    # select highest frequency fam/class/order combo\n    fam2 = as.data.frame( table(datfam[ , c(1,3,4)]) )\n    family2 = as.vector(fam2[ fam2$Freq==max(fam2$Freq, na.rm=TRUE), \"fam1\"] ) \n    order2 = as.vector(fam2[ fam2$Freq==max(fam2$Freq, na.rm=TRUE), \"order1\"] )\n    class2 = as.vector(fam2[ fam2$Freq==max(fam2$Freq, na.rm=TRUE), \"class1\"] )\n    # select highest in list if more than one max\n    if(length(family2) &gt; 1){\n      datfam2 = datfam[datfam$fam1 %in% family2, ]\n      family2 = as.vector(datfam2[datfam2$order == min(datfam2$order, na.rm=TRUE), \"fam1\"])\n      order2 = as.vector(datfam2[datfam2$order == min(datfam2$order, na.rm\n\n=TRUE), \"order1\"])\n      class2 = as.vector(datfam2[datfam2$order == min(datfam2$order, na.rm=TRUE), \"class1\"])\n    } \n  }\n\n  # (4) search for species synonyms in ITIS\n  syns = tryCatch(suppressMessages(synonyms(taxa, db='itis')), error=function(e) e)\n  if(class(syns)[1] == 'simpleError'){ return(data.frame(Original=taxname, Submitted=taxa, Accepted_name=\"failed\", Selected_family=family2, Selected_order=order2, Selected_class=class2, Synonyms=\"failed\"))}\n  syns = as.data.frame(syns[[1]])\n  \n  # get info\n  original = taxa\n  accepted_name = taxa # save accepted name as original searched name\n  if(\"acc_name\" %in% names(syns)){ accepted_name = syns$acc_name } # unless search shows that this is not the accepted name\n   if(\"syn_name\" %in% names(syns)){ synonyms = unique(syns$syn_name) \n  } else{ synonyms = NA }\n  \n  # combine into list and add synonyms \n  result = data.frame(Original=taxname, \n                      Submitted=taxa,\n                      Accepted_name=accepted_name,\n                      Selected_family=family2,\n                      Selected_order=order2,\n                      Selected_class=class2)\n  result = do.call(\"rbind\", replicate(length(synonyms), result[1, ], simplify = FALSE))\n  result$Synonyms = synonyms\n  return(result)\n}\n\n# nest function within a tryCatch call in case of any errors\nfindSyns3 = function(x){\n  result = tryCatch(findSyns2(x), error=function(e) NULL)\n  return(result)\n}\n\n\nEarlier, we saw that there’s a name synonymous with Ramphocelus sanguinolentus. What would the function by Gibb et al. do with that?\n\n\nCode\nRam.syn1 &lt;- findSyns3(\"Phlogothraupis sanguinolenta\")\n\n\n[1] \"Processing: Phlogothraupis sanguinolenta\"\n══  1 queries  ═══════════════\n✔  Found:  Phlogothraupis sanguinolenta\n══  Results  ═════════════════\n\n• Total: 1 \n• Found: 1 \n• Not Found: 0\n\n\nCode\nRam.syn1\n\n\n\n\n\n\nOriginal\nSubmitted\nAccepted_name\nSelected_family\nSelected_order\nSelected_class\nSynonyms\n\n\n\n\nPhlogothraupis sanguinolenta\nPhlogothraupis sanguinolenta\nRamphocelus sanguinolentus\nThraupidae\nPasseriformes\nAves\nPhlogothraupis sanguinolenta\n\n\n\n\n\n\nAnd with one that’s misspelled?\n\n\nCode\nRam.syn2 &lt;- findSyns3(Ram.names2[2])\n\n\n[1] \"Processing: Ramphocelus passerini\"\n══  1 queries  ═══════════════\n✔  Found:  Ramphocelus passerinii\n══  Results  ═════════════════\n\n• Total: 1 \n• Found: 1 \n• Not Found: 0\n\n\nCode\nRam.syn2\n\n\n\n\n\n\nOriginal\nSubmitted\nAccepted_name\nSelected_family\nSelected_order\nSelected_class\nSynonyms\n\n\n\n\nRamphocelus passerini\nRamphocelus passerinii\nRamphocelus passerinii\nThraupidae\nPasseriformes\nAves\nNA"
  },
  {
    "objectID": "reproducible_taxonomy.html#camera-trap-data-management",
    "href": "reproducible_taxonomy.html#camera-trap-data-management",
    "title": "\nReproducibility in the use of taxonomic information\n",
    "section": "4.2 Camera trap data management",
    "text": "4.2 Camera trap data management\n\n\n\n Article by Niedballa et al. 2016,Methods Ecol. Evol.\n\nFrom the methods section:\n“Users are free to use any species names (or abbreviations or codes) they wish. If scientific or common species names are used, the function checkSpeciesNames can check them against the ITIS taxonomic database (www.itis.gov) and returns their matching counterparts (utilizing the R package taxize (Chamberlain & Szöcs 2013) internally), making sure species names and spelling are standardized and taxonomically sound, and thus making it easier to combine data sets from different studies.”\nLet’s see some examples from the camtrapR vignettes. We’re not going to download the package because the CRAN version of ‘camtrapR’ is not compatible with the CRAN version of ‘taxize’.\n\n\n\nLet’s rewrite the current function updating the arguments of ‘taxize’.\n\n\nCode\ncheckSpeciesNames &lt;- function(speciesNames, searchtype, accepted = TRUE,\n    ask = TRUE) {\n    if (!requireNamespace(\"taxize\", quietly = TRUE)) {\n        stop(\"Please install the package taxize to run this function\")\n    }\n    if (!requireNamespace(\"ritis\", quietly = TRUE)) {\n        stop(\"Please install the package ritis to run this function\")\n    }\n    searchtype &lt;- match.arg(searchtype, choices = c(\"scientific\",\n        \"common\"))\n    stopifnot(is.logical(accepted))\n    stopifnot(is.character(speciesNames) | is.factor(speciesNames))\n    speciesNames &lt;- unique(as.character(speciesNames))\n    file.sep &lt;- .Platform$file.sep\n    tsns &lt;- try(taxize::get_tsn(sci_com = speciesNames, searchtype = searchtype,\n        accepted = accepted, ask = ask, messages = FALSE))\n    if (inherits(tsns, \"try-error\")) {\n        message(paste(\"error in get_tsn. Exiting without results:\\n\",\n            tsns, sep = \"\"))\n        return(invisible(NULL))\n    }\n    tsns &lt;- taxize::as.tsn(unique(tsns), check = FALSE)\n    if (any(is.na(tsns))) {\n        not.matched &lt;- which(is.na(tsns))\n        warning(paste(\"found no matches for\", length(not.matched),\n            \"name(s):\\n\", paste(speciesNames[not.matched], collapse = \", \")),\n            immediate. = TRUE, call. = FALSE)\n        tsns_worked &lt;- taxize::as.tsn(tsns[-not.matched], check = FALSE)\n    } else {\n        tsns_worked &lt;- tsns\n    }\n\n    if (length(tsns_worked) &gt;= 1) {\n        scientific &lt;- common &lt;- author &lt;- rankname &lt;- taxon_status &lt;- data.frame(matrix(NA,\n            nrow = length(tsns_worked), ncol = 2), stringsAsFactors = FALSE)\n        colnames(scientific) &lt;- c(\"tsn\", \"combinedname\")\n        colnames(common) &lt;- c(\"tsn\", \"commonName\")\n        colnames(author) &lt;- c(\"tsn\", \"authorship\")\n        colnames(rankname) &lt;- c(\"tsn\", \"rankname\")\n        colnames(taxon_status) &lt;- c(\"tsn\", \"taxonUsageRating\")\n\n        for (i in 1:length(tsns_worked)) {\n\n            scientific_tmp &lt;- ritis::scientific_name(tsns_worked[i])\n            common_tmp &lt;- ritis::common_names(tsns_worked[i])\n            author_tmp &lt;- ritis::taxon_authorship(tsns_worked[i])\n            rankname_tmp &lt;- ritis::rank_name(tsns_worked[i])\n            if (\"tsn\" %in% colnames(scientific_tmp)) {\n                scientific[i, ] &lt;- scientific_tmp[c(\"tsn\", \"combinedname\")]\n            }\n            if (\"tsn\" %in% colnames(common_tmp)) {\n                if (length(unique(common_tmp$tsn)) &gt; 1) {\n                  common2 &lt;- tapply(common_tmp$commonName, INDEX = common_tmp$tsn,\n                    FUN = paste, collapse = file.sep)\n                  common_tmp &lt;- data.frame(commonName = common2, tsn = rownames(common2),\n                    stringsAsFactors = FALSE)\n                }\n                common[i, ] &lt;- common_tmp[, c(\"tsn\", \"commonName\")]\n            }\n            if (\"tsn\" %in% colnames(author_tmp)) {\n                author[i, ] &lt;- author_tmp[c(\"tsn\", \"authorship\")]\n            }\n            if (\"tsn\" %in% colnames(rankname_tmp)) {\n                rankname[i, ] &lt;- rankname_tmp[c(\"tsn\", \"rankname\")]\n            }\n            if (accepted == FALSE) {\n                taxon_status_tmp &lt;- ritis::core_metadata(tsns_worked[i])\n                if (\"tsn\" %in% colnames(taxon_status_tmp)) {\n                  taxon_status[i, ] &lt;- taxon_status_tmp[c(\"tsn\", \"taxonUsageRating\")]\n                }\n            }\n        }\n        dat.out &lt;- data.frame(user_name = speciesNames, tsn = as.numeric(tsns))\n        dat.out &lt;- merge(x = dat.out, y = scientific, by = \"tsn\",\n            all.x = TRUE, sort = FALSE)\n        dat.out &lt;- merge(x = dat.out, y = common, by = \"tsn\", all.x = TRUE,\n            sort = FALSE)\n        dat.out &lt;- merge(x = dat.out, y = author, by = \"tsn\", all.x = TRUE,\n            sort = FALSE)\n        dat.out &lt;- merge(x = dat.out, y = rankname, by = \"tsn\", all.x = TRUE,\n            sort = FALSE)\n        dat.out$itis_url &lt;- NA\n        dat.out$itis_url[match(tsns_worked, dat.out$tsn)] &lt;- attributes(tsns_worked)$uri\n        colnames(dat.out)[colnames(dat.out) == \"combinedname\"] &lt;- \"scientificName\"\n        if (accepted == FALSE) {\n            dat.out &lt;- merge(x = dat.out, y = taxon_status, by = \"tsn\",\n                all.x = TRUE, sort = FALSE)\n        } else {\n            dat.out$taxon_status[!is.na(dat.out$tsn)] &lt;- \"valid\"\n        }\n        return(dat.out)\n    } else {\n        stop(\"found no TSNs for speciesNames\", call. = FALSE)\n    }\n}\n\n\nNow, what can we do?\n\n4.2.1 Search information by common names\n\n\nCode\ncheckNames1 &lt;- checkSpeciesNames(speciesNames = c(\"Bearded Pig\", \"Malayan Civet\"),\n    searchtype = \"common\")\n\n\nWarning in `[&lt;-.data.frame`(`*tmp*`, i, , value = structure(list(tsn =\nc(\"625012\", : replacement element 1 has 2 rows to replace 1 rows\n\n\nWarning in `[&lt;-.data.frame`(`*tmp*`, i, , value = structure(list(tsn =\nc(\"625012\", : replacement element 2 has 2 rows to replace 1 rows\n\n\nCode\ncheckNames1 %&gt;%\n    kbl() %&gt;%\n    kable_minimal()\n\n\n\n\n\ntsn\nuser_name\nscientificName\ncommonName\nauthorship\nrankname\nitis_url\ntaxon_status\n\n\n\n\n625012\nBearded Pig\nSus barbatus\nbearded pig\nMüller, 1838\nSpecies\nhttps://www.itis.gov/servlet/SingleRpt/SingleRpt?search_topic=TSN&search_value=625012\nvalid\n\n\n622004\nMalayan Civet\nViverra tangalunga\nMalayan Civet\nGray, 1832\nSpecies\nhttps://www.itis.gov/servlet/SingleRpt/SingleRpt?search_topic=TSN&search_value=622004\nvalid\n\n\n\n\n\n\n\n\n\n4.2.2 Search information by scientific names (including subspecies)\n\n\nCode\ncheckNames2 &lt;- checkSpeciesNames(speciesNames = \"Viverra tangalunga tangalunga\",\n    searchtype = \"scientific\")\ncheckNames2 %&gt;%\n    kbl() %&gt;%\n    kable_minimal()\n\n\n\n\n\ntsn\nuser_name\nscientificName\ncommonName\nauthorship\nrankname\nitis_url\ntaxon_status\n\n\n\n\n726578\nViverra tangalunga tangalunga\nViverra tangalunga tangalunga\nNA\nGray, 1832\nSubspecies\nhttps://www.itis.gov/servlet/SingleRpt/SingleRpt?search_topic=TSN&search_value=726578\nvalid\n\n\n\n\n\n\n\n\n\n4.2.3 Search information with an incorrect name\n\n\nCode\ncheckNames3 &lt;- checkSpeciesNames(speciesNames = \"Felis bengalensis\",\n    searchtype = \"scientific\", accepted = FALSE)\n\ncheckNames3\n\n\n\n\n\n\ntsn\nuser_name\nscientificName\ncommonName\nauthorship\nrankname\nitis_url\ntaxonUsageRating\n\n\n\n\n183793\nFelis bengalensis\nFelis bengalensis\nleopard cat\nKerr, 1792\nSpecies\nhttps://www.itis.gov/servlet/SingleRpt/SingleRpt?search_topic=TSN&search_value=183793\ninvalid\n\n\n\n\n\n\n\n\n4.2.4 Search information with an ambiguous name\n\n\nCode\ncheckNames4 &lt;- checkSpeciesNames(speciesNames = \"Chevrotain\", searchtype = \"common\")\n# choose from the menu\ncheckNames4"
  }
]